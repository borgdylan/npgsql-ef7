<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Npgsql</name>
    </assembly>
    <members>
        <member name="T:Npgsql.BackendEncoding">
            <summary>
            The globally available text encoding used for frontend/backend communication.
            </summary>
        </member>
        <member name="P:Npgsql.Cache`1.CacheSize">
            <summary>
            Set Cache Size. The default value is 20.
            </summary>
        </member>
        <member name="P:Npgsql.Cache`1.Item(System.String)">
            <summary>
            Lookup cached entity. null will returned if not match.
            For both get{} and set{} apply LRU rule.
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.HashAlgorithm.#ctor">
            <summary>
            Called from constructor of derived class.
            </summary>
        </member>
        <member name="M:Npgsql.HashAlgorithm.Finalize">
            <summary>
            Finalizer for HashAlgorithm
            </summary>
        </member>
        <member name="P:Npgsql.HashAlgorithm.CanTransformMultipleBlocks">
            <summary>
            Get whether or not the hash can transform multiple blocks at a time.
            Note: MUST be overriden if descendant can transform multiple block
            on a single call!
            </summary>
        </member>
        <member name="M:Npgsql.HashAlgorithm.ComputeHash(System.Byte[])">
            <summary>
            Computes the entire hash of all the bytes in the byte array.
            </summary>
        </member>
        <member name="P:Npgsql.HashAlgorithm.Hash">
            <summary>
            Gets the previously computed hash.
            </summary>
        </member>
        <member name="M:Npgsql.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, drives the hashing function.
            </summary>
            <param name="rgb"></param>
            <param name="start"></param>
            <param name="size"></param>
        </member>
        <member name="M:Npgsql.HashAlgorithm.HashFinal">
            <summary>
            When overridden in a derived class, this pads and hashes whatever data might be left in the buffers and then returns the hash created.
            </summary>
        </member>
        <member name="P:Npgsql.HashAlgorithm.HashSize">
            <summary>
            Returns the size in bits of the hash.
            </summary>
        </member>
        <member name="M:Npgsql.HashAlgorithm.Initialize">
            <summary>
            When overridden in a derived class, initializes the object to prepare for hashing.
            </summary>
        </member>
        <member name="P:Npgsql.HashAlgorithm.InputBlockSize">
            <summary>
            Must be overriden if not 1
            </summary>
        </member>
        <member name="P:Npgsql.HashAlgorithm.OutputBlockSize">
            <summary>
            Must be overriden if not 1
            </summary>
        </member>
        <member name="M:Npgsql.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Used for stream chaining.  Computes hash as data passes through it.
            </summary>
            <param name="inputBuffer">The buffer from which to grab the data to be copied.</param>
            <param name="inputOffset">The offset into the input buffer to start reading at.</param>
            <param name="inputCount">The number of bytes to be copied.</param>
            <param name="outputBuffer">The buffer to write the copied data to.</param>
            <param name="outputOffset">At what point in the outputBuffer to write the data at.</param>
        </member>
        <member name="M:Npgsql.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Used for stream chaining.  Computes hash as data passes through it.  Finishes off the hash.
            </summary>
            <param name="inputBuffer">The buffer from which to grab the data to be copied.</param>
            <param name="inputOffset">The offset into the input buffer to start reading at.</param>
            <param name="inputCount">The number of bytes to be copied.</param>
        </member>
        <member name="T:Npgsql.MD5">
            <summary>
            Common base class for all derived MD5 implementations.
            </summary>
        </member>
        <member name="M:Npgsql.MD5.#ctor">
            <summary>
            Called from constructor of derived class.
            </summary>
        </member>
        <member name="M:Npgsql.MD5.Create">
            <summary>
            Creates the default derived class.
            </summary>
        </member>
        <member name="T:Npgsql.MD5CryptoServiceProvider">
            <summary>
            C# implementation of the MD5 cryptographic hash function.
            </summary>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.#ctor">
            <summary>
            Creates a new MD5CryptoServiceProvider.
            </summary>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Drives the hashing function.
            </summary>
            <param name="rgb">Byte array containing the data to hash.</param>
            <param name="start">Where in the input buffer to start.</param>
            <param name="size">Size in bytes of the data in the buffer to hash.</param>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.HashFinal">
            <summary>
            This finalizes the hash.  Takes the data from the chaining variables and returns it.
            </summary>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.Initialize">
            <summary>
            Resets the class after use.  Called automatically after hashing is done.
            </summary>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.ProcessBlock(System.Byte[],System.Int32)">
            <summary>
            This is the meat of the hash function.  It is what processes each block one at a time.
            </summary>
            <param name="inputBuffer">Byte array to process data from.</param>
            <param name="inputOffset">Where in the byte array to start processing.</param>
        </member>
        <member name="M:Npgsql.MD5CryptoServiceProvider.ProcessFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pads and then processes the final block.
            </summary>
            <param name="inputBuffer">Buffer to grab data from.</param>
            <param name="inputOffset">Position in buffer in bytes to get data from.</param>
            <param name="inputCount">How much data in bytes in the buffer to use.</param>
        </member>
        <member name="F:Npgsql.NpgsqlBuffer._tempCharBuf">
            <summary>
            Used for internal temporary purposes
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlBuffer.MinimumBufferSize">
            <summary>
            The minimum buffer size possible.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBuffer.#ctor(System.String,System.Text.Encoding)">
            <summary>
            A total hack for reading elements of text-encoded arrays
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBuffer.EnsureOrAllocateTemp(System.Int32)">
            <summary>
            Reads in the requested bytes into the buffer, or if the buffer isn't big enough, allocates a new
            temporary buffer and reads into it. Returns the buffer that contains the data (either itself or the
            temp buffer). Used in cases where we absolutely have to have an entire value in memory and cannot
            read it in sequentially.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBuffer.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Seeks within the current in-memory data. Does not read any data from the underlying.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
        </member>
        <member name="M:Npgsql.NpgsqlBuffer.ReadChars(System.Int32)">
            <summary>
            Converts a given number of bytes into a char array and returns it. Expects the required bytes
            to already be in the buffer
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBuffer.ReadString(System.Int32)">
            <summary>
            Note that unlike the primitive readers, this reader can read any length, looping internally
            and reading directly from the underlying stream
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlBuffer.ReadBytes(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            </summary>
            <param name="readAll">whether to loop internally until all bytes are read,
            or return after a single read to the underlying stream</param>
        </member>
        <member name="M:Npgsql.NpgsqlBuffer.ReadBytesHex(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Note that unlike the primitive readers, this reader can read any length, looping internally
            and reading directly from the underlying stream
            </summary>
            <param name="output"></param>
            <param name="outputOffset"></param>
            <param name="len">(decoded) number of bytes to fill in <paramref name="output"/></param>
            <param name="readAll">whether to loop internally until all bytes are read,
            or return after a single read to the underlying stream</param>
        </member>
        <member name="M:Npgsql.NpgsqlBuffer.ReadChars(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Note that unlike the primitive readers, this reader can read any length, looping internally
            and reading directly from the underlying stream.
            </summary>
            <param name="output">output buffer to fill</param>
            <param name="outputOffset">offset in the output buffer in which to start writing</param>
            <param name="charCount">number of character to be read into the output buffer</param>
            <param name="byteCount">number of bytes left in the field. This method will not read bytes
            beyond this count</param>
            <returns>the number of bytes read</returns>
        </member>
        <member name="M:Npgsql.NpgsqlBuffer.SkipChars(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Skips over characters in the buffer, reading from the underlying stream as necessary.
            </summary>
            <param name="charCount">the number of characters to skip over.
            int.MaxValue means all available characters (limited only by <paramref name="byteCount"/>).
            </param>
            <param name="byteCount">the maximal number of bytes to process</param>
            <returns>the number of bytes read</returns>
        </member>
        <member name="M:Npgsql.NpgsqlBuffer.DecodeHex(System.Byte)">
            <summary>
            Decodes a byte in bytea hex format. Each byte contains a single ASCII hex digit.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlCommand">
            <summary>
            Represents a SQL statement or function (stored procedure) to execute
            against a PostgreSQL database. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> class with the text of the query.
            </summary>
            <param name="cmdText">The text of the query.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.String,Npgsql.NpgsqlConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> class with the text of the query and a <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>.
            </summary>
            <param name="cmdText">The text of the query.</param>
            <param name="connection">A <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see> that represents the connection to a PostgreSQL server.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.String,Npgsql.NpgsqlConnection,Npgsql.NpgsqlTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> class with the text of the query, a <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>, and the <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>.
            </summary>
            <param name="cmdText">The text of the query.</param>
            <param name="connection">A <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see> that represents the connection to a PostgreSQL server.</param>
            <param name="transaction">The <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see> in which the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> executes.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.#ctor(System.String,Npgsql.NpgsqlConnector,System.Int32)">
            <summary>
            Used to execute internal commands.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.CommandText">
            <summary>
            Gets or sets the SQL statement or function (stored procedure) to execute at the data source.
            </summary>
            <value>The Transact-SQL statement or stored procedure to execute. The default is an empty string.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt
            to execute a command and generating an error.
            </summary>
            <value>The time (in seconds) to wait for the command to execute.
            The default is 20 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.CommandType">
            <summary>
            Gets or sets a value indicating how the
            <see cref="P:Npgsql.NpgsqlCommand.CommandText">CommandText</see> property is to be interpreted.
            </summary>
            <value>One of the <see cref="T:System.Data.CommandType">CommandType</see> values. The default is <see cref="T:System.Data.CommandType">CommandType.Text</see>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.DbConnection">
            <summary>
            DB connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.Connection">
            <summary>
            Gets or sets the <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>
            used by this instance of the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see>.
            </summary>
            <value>The connection to a data source. The default value is a null reference.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.DesignTimeVisible">
            <summary>
            Design time visible.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow">DataRow</see>
            when used by the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)">Update</see>
            method of the <see cref="T:System.Data.Common.DbDataAdapter">DbDataAdapter</see>.
            </summary>
            <value>One of the <see cref="T:System.Data.UpdateRowSource">UpdateRowSource</see> values.</value>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.IsPrepared">
            <summary>
            Returns whether this query will execute as a prepared (compiled) query.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.State">
            <summary>
            Gets the current state of the connector
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.CreateDbParameter">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.Common.DbParameter">DbParameter</see> object.
            </summary>
            <returns>An <see cref="T:System.Data.Common.DbParameter">DbParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.CreateParameter">
            <summary>
            Creates a new instance of a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.DbParameterCollection">
            <summary>
            DB parameter collection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.Parameters">
            <summary>
            Gets the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see>.
            </summary>
            <value>The parameters of the SQL statement or function (stored procedure). The default is an empty collection.</value>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Prepare">
            <summary>
            Creates a prepared version of the command on a PostgreSQL server.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ProcessRawQueryText(System.String)">
            <summary>
            Receives a raw SQL query as passed in by the user, and performs some processing necessary
            before sending to the backend.
            This includes doing parameter placebolder processing (@p => $1), and splitting the query
            up by semicolons if needed (SELECT 1; SELECT 2)
            </summary>
            <param name="src">Raw user-provided query</param>
            <returns>the queries contained in the raw text</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteNonQuery">
            <summary>
            Executes a SQL statement against the connection and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronous version of <see cref="M:Npgsql.NpgsqlCommand.ExecuteNonQuery"/>
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row
            in the result set returned by the query. Extra columns or rows are ignored.
            </summary>
            <returns>The first column of the first row in the result set,
            or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronous version of <see cref="M:Npgsql.NpgsqlCommand.ExecuteScalar"/>
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with the first column of the
            first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteReader">
            <summary>
            Executes the CommandText against the Connection, and returns an DbDataReader.
            </summary>
            <remarks>
            Unlike the ADO.NET method which it replaces, this method returns a Npgsql-specific
            DataReader.
            </remarks>
            <returns>A DbDataReader object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Executes the CommandText against the Connection, and returns an DbDataReader using one
            of the CommandBehavior values.
            </summary>
            <remarks>
            Unlike the ADO.NET method which it replaces, this method returns a Npgsql-specific
            DataReader.
            </remarks>
            <returns>A DbDataReader object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            Executes the command text against the connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.DbTransaction">
            <summary>
            DB transaction.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCommand.Transaction">
            <summary>
            Gets or sets the <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>
            within which the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> executes.
            </summary>
            <value>The <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>.
            The default value is a null reference.</value>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Cancel">
            <summary>
            Attempts to cancel the execution of a <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see>.
            </summary>
            <remarks>As per the specs, no exception will be thrown by this method in case of failure</remarks>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see>.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.CheckConnectionState">
            <summary>
             This method checks the connection state to see if the connection
             is set or it is open. If one of this conditions is not met, throws
             an InvalidOperationException
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.System#ICloneable#Clone">
            <summary>
            Create a new command based on this one.
            </summary>
            <returns>A new NpgsqlCommand object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommand.Clone">
            <summary>
            Create a new command based on this one.
            </summary>
            <returns>A new NpgsqlCommand object.</returns>
        </member>
        <member name="T:Npgsql.NpgsqlCommandBuilder">
            <summary>
             This class is responsible to create database commands for automatic insert, update and delete operations.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommandBuilder"/> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.#ctor(Npgsql.NpgsqlDataAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlCommandBuilder"/> class.
            </summary>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="P:Npgsql.NpgsqlCommandBuilder.QuotePrefix">
            <summary>
            Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.
            </summary>
            <returns>
            The beginning character or characters to use. The default is an empty string.
              </returns>
              <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
              </PermissionSet>
        </member>
        <member name="P:Npgsql.NpgsqlCommandBuilder.QuoteSuffix">
            <summary>
            Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.
            </summary>
            <returns>
            The ending character or characters to use. The default is an empty string.
              </returns>
              <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
              </PermissionSet>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.DeriveParameters(Npgsql.NpgsqlCommand)">
            <summary>
            
             This method is reponsible to derive the command parameter list with values obtained from function definition.
             It clears the Parameters collection of command. Also, if there is any parameter type which is not supported by Npgsql, an InvalidOperationException will be thrown.
             Parameters name will be parameter1, parameter2, ...
            </summary>
             <param name="command">NpgsqlCommand whose function parameters will be obtained.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetInsertCommand">
            <summary>
            Gets the automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required
            to perform insertions at the data source.
            </summary>
            <returns>
            The automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform insertions.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetInsertCommand(System.Boolean)">
            <summary>
            Gets the automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform insertions 
            at the data source, optionally using columns for parameter names.
            </summary>
            <param name="useColumnsForParameterNames">
            If <c>true</c>, generate parameter names matching column names, if possible. 
            If <c>false</c>, generate @p1, @p2, and so on.
            </param>
            <returns>
            The automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform insertions.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetUpdateCommand">
            <summary>
            Gets the automatically generated System.Data.Common.DbCommand object required
            to perform updates at the data source.
            </summary>
            <returns>
            The automatically generated System.Data.Common.DbCommand object required to perform updates.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetUpdateCommand(System.Boolean)">
            <summary>
            Gets the automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform updates
            at the data source, optionally using columns for parameter names.
            </summary>
            <param name="useColumnsForParameterNames">
            If <c>true</c>, generate parameter names matching column names, if possible. 
            If <c>false</c>, generate @p1, @p2, and so on.
            </param>
            <returns>
            The automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform updates.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetDeleteCommand">
            <summary>
            Gets the automatically generated System.Data.Common.DbCommand object required
            to perform deletions at the data source.
            </summary>
            <returns>
            The automatically generated System.Data.Common.DbCommand object required to perform deletions.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetDeleteCommand(System.Boolean)">
            <summary>
            Gets the automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform deletions 
            at the data source, optionally using columns for parameter names.
            </summary>
            <param name="useColumnsForParameterNames">
            If <c>true</c>, generate parameter names matching column names, if possible.
            If <c>false</c>, generate @p1, @p2, and so on.
            </param>
            <returns>
            The automatically generated <see cref="T:Npgsql.NpgsqlCommand"/> object required to perform deletions.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
            <summary>
            Applies the parameter information.
            </summary>
            <param name="p">The parameter.</param>
            <param name="row">The row.</param>
            <param name="statementType">Type of the statement.</param>
            <param name="whereClause">if set to <c>true</c> [where clause].</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetParameterName(System.Int32)">
            <summary>
            Returns the name of the specified parameter in the format of @p#.
            </summary>
            <param name="parameterOrdinal">The number to be included as part of the parameter's name..</param>
            <returns>
            The name of the parameter with the specified number appended as part of the parameter name.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetParameterName(System.String)">
            <summary>
            Returns the full parameter name, given the partial parameter name.
            </summary>
            <param name="parameterName">The partial name of the parameter.</param>
            <returns>
            The full parameter name corresponding to the partial parameter name requested.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.GetParameterPlaceholder(System.Int32)">
            <summary>
            Returns the placeholder for the parameter in the associated SQL statement.
            </summary>
            <param name="parameterOrdinal">The number to be included as part of the parameter's name.</param>
            <returns>
            The name of the parameter with the specified number appended.
            </returns>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
            <summary>
            Registers the <see cref="T:NpgsqlCommandBuilder" /> to handle the <see cref="E:NpgsqlDataAdapter.RowUpdating"/> event for a <see cref="T:NpgsqlDataAdapter" />.
            </summary>
            <param name="adapter">The <see cref="T:System.Data.Common.DbDataAdapter" /> to be used for the update.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.RowUpdatingHandler(System.Object,Npgsql.NpgsqlRowUpdatingEventArgs)">
            <summary>
            Adds an event handler for the <see cref="E:Npgsql.NpgsqlDataAdapter.RowUpdating"/> event.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">A <see cref="T:Npgsql.NpgsqlRowUpdatingEventArgs"/> instance containing information about the event.</param>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.QuoteIdentifier(System.String)">
            <summary>
            Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.
            </summary>
            <param name="unquotedIdentifier">The original unquoted identifier.</param>
            <returns>
            The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            <exception cref="T:System.ArgumentNullException">Unquoted identifier parameter cannot be null</exception>
        </member>
        <member name="M:Npgsql.NpgsqlCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>
            Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.
            </summary>
            <param name="quotedIdentifier">The identifier that will have its embedded quotes removed.</param>
            <returns>
            The unquoted identifier, with embedded quotes properly un-escaped.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
              </PermissionSet>
            <exception cref="T:System.ArgumentNullException">Quoted identifier parameter cannot be null</exception>
        </member>
        <member name="T:Npgsql.NpgsqlConnection">
            <summary>
            This class represents a connection to a PostgreSQL server.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Connector">
            <summary>
            The connector object connected to the backend.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see> class
            and sets the <see cref="P:Npgsql.NpgsqlConnection.ConnectionString">ConnectionString</see>.
            </summary>
            <param name="connectionString">The connection used to open the PostgreSQL database.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.#ctor(Npgsql.NpgsqlConnectionStringBuilder)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see> class
            and sets the <see cref="P:Npgsql.NpgsqlConnection.ConnectionString">ConnectionString</see>.
            </summary>
            <param name="connectionString">The connection used to open the PostgreSQL database.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Open">
            <summary>
            Opens a database connection with the property settings specified by the
            <see cref="P:Npgsql.NpgsqlConnection.ConnectionString">ConnectionString</see>.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ConnectionString">
            <summary>
            Gets or sets the string used to connect to a PostgreSQL database. See the manual for details.
            </summary>
            <value>The connection string that includes the server name,
            the database name, and other parameters needed to establish
            the initial connection. The default value is an empty string.
            </value>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.CopyConnectionStringBuilder">
            <summary>
            Returns a copy of the NpgsqlConnectionStringBuilder that contains the parsed connection string values.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.LoadConnectionStringBuilder(System.String)">
            <summary>
            Sets the `settings` ConnectionStringBuilder based on the given `connectionString`
            </summary>
            <param name="connectionString">The connection string to load the builder from</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.LoadConnectionStringBuilder(Npgsql.NpgsqlConnectionStringBuilder)">
            <summary>
            Sets the `settings` ConnectionStringBuilder based on the given `connectionString`
            </summary>
            <param name="connectionString">The connection string to load the builder from</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.RefreshConnectionString">
            <summary>
            Refresh the cached _connectionString whenever the builder settings change
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Host">
            <summary>
            Backend server host name.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Port">
            <summary>
            Backend server port.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.SSL">
            <summary>
            If true, the connection will attempt to use SSL.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.UseSslStream">
            <summary>
            If true, the connection will attempt to use SslStream instead of Mono.Security.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ConnectionTimeout">
            <summary>
            Gets the time to wait while trying to establish a connection
            before terminating the attempt and generating an error.
            </summary>
            <value>The time (in seconds) to wait for a connection to open. The default value is 15 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.CommandTimeout">
            <summary>
            Gets the time to wait while trying to execute a command
            before terminating the attempt and generating an error.
            </summary>
            <value>The time (in seconds) to wait for a command to complete. The default value is 20 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ConnectionLifeTime">
            <summary>
            Gets the time to wait before closing unused connections in the pool if the count
            of all connections exeeds MinPoolSize.
            </summary>
            <remarks>
            If connection pool contains unused connections for ConnectionLifeTime seconds,
            the half of them will be closed. If there will be unused connections in a second
            later then again the half of them will be closed and so on.
            This strategy provide smooth change of connection count in the pool.
            </remarks>
            <value>The time (in seconds) to wait. The default value is 15 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Database">
            <summary>
             Gets the name of the current database or the database to be used after a connection is opened.
             </summary>
             <value>The name of the current database or the name of the database to be
             used after a connection is opened. The default value is the empty string.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.DataSource">
            <summary>
            Gets the database server name.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.SyncNotification">
            <summary>
            Gets flag indicating if we are using Synchronous notification or not.
            The default value is false.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.NpgsqlCompatibilityVersion">
            <summary>
            Compatibility version.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.UseExtendedTypes">
            <summary>
            Use extended types.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Pooling">
            <summary>
            Determine if connection pooling will be used for this connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.FullState">
            <summary>
            Gets the current state of the connection.
            </summary>
            <value>A bitwise combination of the <see cref="T:System.Data.ConnectionState">ConnectionState</see> values. The default is <b>Closed</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.State">
            <summary>
            Gets whether the current state of the connection is Open or Closed
            </summary>
            <value>ConnectionState.Open, ConnectionState.Closed or ConnectionState.Connecting</value>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.CreateDbCommand">
            <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand">DbCommand</see>
            object associated with the <see cref="T:System.Data.Common.DbConnection">IDbConnection</see>.
            </summary>
            <returns>A <see cref="T:System.Data.Common.DbCommand">DbCommand</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.CreateCommand">
            <summary>
            Creates and returns a <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see>
            object associated with the <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified isolation level.
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel">isolation level</see> under which the transaction should run.</param>
            <returns>An <see cref="T:System.Data.Common.DbTransaction">DbTransaction</see>
            object representing the new transaction.</returns>
            <remarks>
            Currently the IsolationLevel ReadCommitted and Serializable are supported by the PostgreSQL backend.
            There's no support for nested transactions.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
            <returns>A <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>
            object representing the new transaction.</returns>
            <remarks>
            Currently there's no support for nested transactions.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified isolation level.
            </summary>
            <param name="level">The <see cref="T:System.Data.IsolationLevel">isolation level</see> under which the transaction should run.</param>
            <returns>A <see cref="T:Npgsql.NpgsqlTransaction">NpgsqlTransaction</see>
            object representing the new transaction.</returns>
            <remarks>
            Currently the IsolationLevel ReadCommitted and Serializable are supported by the PostgreSQL backend.
            There's no support for nested transactions.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.PromotableLocalTransactionEnded">
            <summary>
            When a connection is closed within an enclosing TransactionScope and the transaction
            hasn't been promoted, we defer the actual closing until the scope ends.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Enlist transation.
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Close">
            <summary>
            Releases the connection to the database.  If the connection is pooled, it will be
            made available for re-use.  If it is non-pooled, the actual connection will be shutdown.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the
            <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>.
            </summary>
            <param name="disposing"><b>true</b> when called from Dispose();
            <b>false</b> when being called from the finalizer.</param>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.Notice">
            <summary>
            Occurs on NoticeResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.Notification">
            <summary>
            Occurs on NotificationResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.IsSecure">
            <summary>
            Returns whether SSL is being used for the connection.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.ProvideClientCertificatesCallback">
            <summary>
            Called to provide client certificates for SSL handshake.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.CertificateSelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateSelectionCallback delegate.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.CertificateValidationCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateValidationCallback delegate.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.PrivateKeySelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.PrivateKeySelectionCallback delegate.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnection.ValidateRemoteCertificateCallback">
            <summary>
            Called to validate server's certificate during SSL handshake
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.DefaultCertificateSelectionCallback(System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Default SSL CertificateSelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.DefaultCertificateValidationCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32[])">
            <summary>
            Default SSL CertificateValidationCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.DefaultPrivateKeySelectionCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.String)">
            <summary>
            Default SSL PrivateKeySelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.DefaultProvideClientCertificatesCallback(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Default SSL ProvideClientCertificatesCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.DefaultValidateRemoteCertificateCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Default SSL ValidateRemoteCertificateCallback implementation.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.PostgreSqlVersion">
            <summary>
            Version of the PostgreSQL backend.
            This can only be called when there is an active connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ServerVersion">
            <summary>
            PostgreSQL server version.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.BackendProtocolVersion">
            <summary>
            Protocol version in use.
            This can only be called when there is an active connection.
            Always retuna Version3
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.ProcessID">
            <summary>
            Process id of backend server.
            This can only be called when there is an active connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.UseConformantStrings">
            <summary>
            Report whether the backend is expecting standard conformant strings.
            In version 8.1, Postgres began reporting this value (false), but did not actually support standard conformant strings.
            In version 8.2, Postgres began supporting standard conformant strings, but defaulted this flag to false.
            As of version 9.1, this flag defaults to true.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.Supports_E_StringPrefix">
            <summary>
            Report whether the backend understands the string literal E prefix (>= 8.1).
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.SupportsHexByteFormat">
            <summary>
            Report whether the backend understands the hex byte format (>= 9.0).
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.GetSchema">
            <summary>
            Returns the supported collections
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.GetSchema(System.String)">
            <summary>
            Returns the schema collection specified by the collection name.
            </summary>
            <param name="collectionName">The collection name.</param>
            <returns>The collection specified.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.GetSchema(System.String,System.String[])">
            <summary>
            Returns the schema collection specified by the collection name filtered by the restrictions.
            </summary>
            <param name="collectionName">The collection name.</param>
            <param name="restrictions">
            The restriction values to filter the results.  A description of the restrictions is contained
            in the Restrictions collection.
            </param>
            <returns>The collection specified.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.ChangeDatabase(System.String)">
            <summary>
            This method changes the current database by disconnecting from the actual
            database and connecting to the specified.
            </summary>
            <param name="dbName">The name of the database to use in place of the current database.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.System#ICloneable#Clone">
            <summary>
            Create a new connection based on this one.
            </summary>
            <returns>A new NpgsqlConnection object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.Clone">
            <summary>
            Create a new connection based on this one.
            </summary>
            <returns>A new NpgsqlConnection object.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlConnection.DbProviderFactory">
            <summary>
            DB provider factory.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.ClearPool">
            <summary>
            Clear connection pool.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnection.ClearAllPools">
            <summary>
            Clear all connection pools.
            </summary>
        </member>
        <member name="T:Npgsql.NoticeEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Npgsql.NpgsqlConnection.Notification">Notice</see> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Npgsql.NpgsqlNoticeEventArgs">NpgsqlNoticeEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Npgsql.NotificationEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Npgsql.NpgsqlConnection.Notification">Notification</see> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Npgsql.NpgsqlNotificationEventArgs">NpgsqlNotificationEventArgs</see> that contains the event data.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.ValueDescription.#ctor(System.Type,System.Boolean,Npgsql.NpgsqlConnectionStringBuilder.ValueNativeToString)">
            <summary>
            Set both ImplicitDefault and ExplicitDefault to the <paramref name="t"/>'s default value.
            </summary>
            <param name="t"></param>
            <param name="storeInBase"></param>
            <param name="nativeToString"></param>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.ValueDescription.#ctor(System.IComparable,System.Boolean,Npgsql.NpgsqlConnectionStringBuilder.ValueNativeToString)">
            <summary>
            Set ImplicitDefault to the default value of <paramref name="explicitDefault"/>'s type,
            and ExplicitDefault to <paramref name="explicitDefault"/>.
            </summary>
            <param name="explicitDefault"></param>
            <param name="storeInBase"></param>
            <param name="nativeToString"></param>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.Clone">
            <summary>
            Return an exact copy of this NpgsqlConnectionString.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Host">
            <summary>
            Gets or sets the backend server host name.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Port">
            <summary>
            Gets or sets the backend server port.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Database">
            <summary>
             Gets or sets the name of the database to be used after a connection is opened.
             </summary>
             <value>The name of the database to be
             used after a connection is opened.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.UserName">
            <summary>
            Gets or sets the login user name.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.PasswordAsByteArray">
            <summary>
            Gets or sets the login password as a UTF8 encoded byte array.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Password">
            <summary>
            Sets the login password as a string.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.SSL">
            <summary>
            Gets or sets a value indicating whether to attempt to use SSL.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.SslMode">
            <summary>
            Gets or sets a value indicating whether to attempt to use SSL.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Timeout">
            <summary>
            Gets or sets the time to wait while trying to establish a connection
            before terminating the attempt and generating an error.
            </summary>
            <value>The time (in seconds) to wait for a connection to open. The default value is 15 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.SearchPath">
            <summary>
            Gets or sets the schema search path.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.BufferSize">
            <summary>
            Gets or sets the buffer size.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Pooling">
            <summary>
            Gets or sets a value indicating whether connection pooling should be used.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ConnectionLifeTime">
            <summary>
            Gets or sets the time to wait before closing unused connections in the pool if the count
            of all connections exeeds MinPoolSize.
            </summary>
            <remarks>
            If connection pool contains unused connections for ConnectionLifeTime seconds,
            the half of them will be closed. If there will be unused connections in a second
            later then again the half of them will be closed and so on.
            This strategy provide smooth change of connection count in the pool.
            </remarks>
            <value>The time (in seconds) to wait. The default value is 15 seconds.</value>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.MinPoolSize">
            <summary>
            Gets or sets the minimum connection pool size.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.MaxPoolSize">
            <summary>
            Gets or sets the maximum connection pool size.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.SyncNotification">
            <summary>
            Gets or sets a value indicating whether to listen for notifications and report them between command activity.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.CommandTimeout">
            <summary>
            Gets the time to wait while trying to execute a command
            before terminating the attempt and generating an error.
            </summary>
            <value>The time (in seconds) to wait for a command to complete. The default value is 20 seconds.</value>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.CheckIntegratedSecuritySupport">
            <summary>
            No integrated security if we're on mono and .NET 4.5 because of ClaimsIdentity,
            see https://github.com/npgsql/Npgsql/issues/133
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Compatible">
            <summary>
            Compatibilty version. When possible, behaviour caused by breaking changes will be preserved
            if this version is less than that where the breaking change was introduced.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.ApplicationName">
            <summary>
            Gets or sets the ootional application name parameter to be sent to the backend during connection initiation.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.AlwaysPrepare">
            <summary>
            Gets or sets a value indicating whether to silently Prepare() all commands before execution.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnectionStringBuilder.Item(System.String)">
            <summary>
            Case insensative accessor for indivual connection string values.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.SetValue(System.String,Npgsql.Keywords,System.Object)">
            <summary>
            This function will set value for known key, both private member and base[key].
            </summary>
            <param name="keyword"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>value, coerced as needed to the stored type.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.SetValue(Npgsql.Keywords,System.Object)">
            <summary>
            The function will modify private member only, not base[key].
            </summary>
            <param name="keyword"></param>
            <param name="value"></param>
            <returns>value, coerced as needed to the stored type.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.GetValue(Npgsql.Keywords)">
            <summary>
            The function will access private member only, not base[key].
            </summary>
            <param name="keyword"></param>
            <returns>value.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionStringBuilder.Clear">
            <summary>
            Clear the member and assign them to the default value.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlConnector">
            <summary>
            Represents a connection to a PostgreSQL backend. Unlike NpgsqlConnection objects, which are
            exposed to users, connectors are internal to Npgsql and are recycled by the connection pool.
            </summary>
            <summary>
            Represents a connection to a PostgreSQL backend. Unlike NpgsqlConnection objects, which are
            exposed to users, connectors are internal to Npgsql and are recycled by the connection pool.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.Socket">
            <summary>
            The physical connection socket to the backend.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.BaseStream">
            <summary>
            The physical connection stream to the backend.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.Buffer">
            <summary>
            Buffer used for reading data.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.Mediator">
            <summary>
            The connection mediator.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.ServerVersion">
            <summary>
            Version of backend server this connector is connected to.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.BackendSecretKey">
            <summary>
            The secret key of the backend for this connector, used for query cancellation.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.BackendProcessId">
            <summary>
            The process ID of the backend for this connector.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.Transaction">
            <summary>
            Report if the connection is in a transaction.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.NativeToBackendTypeConverterOptions">
            <summary>
            Options that control certain aspects of native to backend conversions that depend
            on backend version and status.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnector._messagesToSend">
            <summary>
            A chain of messages to be sent to the backend.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnector.BackendParams">
            <summary>
            Holds all run-time parameters received from the backend (via ParameterStatus messages)
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnector._deferredCommands">
            <summary>
            Commands to be executed when the reader is done.
            Current usage is for when a prepared command is disposed while its reader is still open; the
            actual DEALLOCATE message must be deferred.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.#ctor(Npgsql.NpgsqlConnectionStringBuilder,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="pooled">Pooled</param>
        </member>
        <member name="F:Npgsql.NpgsqlConnector.UseSslStream">
            <summary>
            Return Connection String.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.State">
            <summary>
            Gets the current state of the connector
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.IsConnected">
            <summary>
            Returns whether the connector is open, regardless of any task it is currently performing
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.IsBusy">
            <summary>
            Returns whether the connector is open and performing a task, i.e. not ready for a query
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.Open">
            <summary>
            Opens the physical connection to the server.
            </summary>
            <remarks>Usually called by the RequestConnector
            Method of the connection pool manager.</remarks>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.SendQueryRaw(System.Byte[])">
            <summary>
            Sends a raw query message to the backend. The message must already contain the message code,
            length etc. - this methods simply writes it to the wire.
            </summary>
            <param name="rawQuery">a fully-built query message, ready to be sent</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.SkipUntil(Npgsql.BackendMessageCode[])">
            <summary>
            Reads backend messages and discards them, stopping only after a message of the given types has
            been seen. Note that when this method is called, the buffer position must be properly set at
            the start of the next message.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.StartCopyIn(Npgsql.NpgsqlCopyFormat)">
            <summary>
            Called from NpgsqlState.ProcessBackendResponses upon CopyInResponse.
            If CopyStream is already set, it is used to read data to push to server, after which the copy is completed.
            Otherwise CopyStream is set to a writable NpgsqlCopyInStream that calls SendCopyData each time it is written to.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.SendCopyInData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends given packet to server as a CopyData message.
            Does not check for notifications! Use another thread for that.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.SendCopyInDone">
            <summary>
            Sends CopyDone message to server. Handles responses, ie. may throw an exception.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.SendCopyInFail(System.String)">
            <summary>
            Sends CopyFail message to server. Handles responses, ie. should always throw an exception:
            in CopyIn state the server responds to CopyFail with an error response;
            outside of a CopyIn state the server responds to CopyFail with an error response;
            without network connection or whatever, there's going to eventually be a failure, timeout or user intervention.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.StartCopyOut(Npgsql.NpgsqlCopyFormat)">
            <summary>
            Called from NpgsqlState.ProcessBackendResponses upon CopyOutResponse.
            If CopyStream is already set, it is used to write data received from server, after which the copy ends.
            Otherwise CopyStream is set to a readable NpgsqlCopyOutStream that receives data from server.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.GetCopyOutData">
            <summary>
            Called from NpgsqlOutStream.Read to read copy data from server.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.Notice">
            <summary>
            Occurs on NoticeResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.Notification">
            <summary>
            Occurs on NotificationResponses from the PostgreSQL backend.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.DefaultCertificateSelectionCallback(System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Cryptography.X509Certificates.X509Certificate,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Default SSL CertificateSelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.DefaultCertificateValidationCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.Int32[])">
            <summary>
            Default SSL CertificateValidationCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.DefaultPrivateKeySelectionCallback(System.Security.Cryptography.X509Certificates.X509Certificate,System.String)">
            <summary>
            Default SSL PrivateKeySelectionCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.DefaultProvideClientCertificatesCallback(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Default SSL ProvideClientCertificatesCallback implementation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.DefaultValidateRemoteCertificateCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Default SSL ValidateRemoteCertificateCallback implementation.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlConnector.IsSecure">
            <summary>
            Returns whether SSL is being used for the connection
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.ProvideClientCertificatesCallback">
            <summary>
            Called to provide client certificates for SSL handshake.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.CertificateSelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateSelectionCallback delegate.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.CertificateValidationCallback">
            <summary>
            Mono.Security.Protocol.Tls.CertificateValidationCallback delegate.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.PrivateKeySelectionCallback">
            <summary>
            Mono.Security.Protocol.Tls.PrivateKeySelectionCallback delegate.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlConnector.ValidateRemoteCertificateCallback">
            <summary>
            Called to validate server's certificate during SSL handshake
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.CancelRequest">
            <summary>
            Creates another connector and sends a cancel request through it for this connector.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.Close">
            <summary>
            Closes the physical connection to the server.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.ReleaseResources">
            <summary>
            This method is responsible for releasing all resources associated with this Connector.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.ReleasePlansPortals">
            <summary>
            This method is responsible to release all portals used by this Connector.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.ProcessServerVersion">
            <summary>
            This method is required to set all the version dependent features flags.
            SupportsPrepare means the server can use prepared query plans (7.3+)
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.ExecuteBlind(System.String)">
            <summary>
            Internal query shortcut for use in cases where the number
            of affected rows is of no interest.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.ExecuteSetStatementTimeoutBlind(System.Int32)">
            <summary>
            Special adaptation of ExecuteBlind() that sets statement_timeout.
            This exists to prevent Connector.SetBackendCommandTimeout() from calling Command.ExecuteBlind(),
            which will cause an endless recursive loop.
            </summary>
            <param name="timeout">Timeout in seconds.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.SetBackendCommandTimeout(System.Int32)">
            <summary>
            Modify the backend statement_timeout value if needed.
            </summary>
            <param name="timeout">New timeout</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.NextPortalName">
            <summary>
             Returns next portal index.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.NextPlanName">
            <summary>
             Returns next plan index.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.IsValid">
            <summary>
            This method checks if the connector is still ok.
            We try to send a simple query text, select 1 as ConnectionTest;
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnector.ExecuteOrDefer(System.String)">
            <summary>
            Executes the command immediately if the connector is ready, otherwise schedules the command for
            execution at the earliest possible convenience.
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="T:Npgsql.ConnectorState">
            <summary>
            Expresses the exact state of a connector.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorState.Closed">
            <summary>
            The connector has either not yet been opened or has been closed.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorState.Connecting">
            <summary>
            The connector is currently connecting to a Postgresql server.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorState.Ready">
            <summary>
            The connector is connected and may be used to send a new query.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorState.Executing">
            <summary>
            The connector is waiting for a response to a query which has been sent to the server.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorState.Fetching">
            <summary>
            The connector is currently fetching and processing query results.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorState.Broken">
            <summary>
            The connection was broken because an unexpected error occurred which left it in an unknown state.
            This state isn't implemented yet.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorState.CopyIn">
            <summary>
            The connector is engaged in a COPY IN operation.
            </summary>
        </member>
        <member name="F:Npgsql.ConnectorState.CopyOut">
            <summary>
            The connector is engaged in a COPY OUT operation.
            </summary>
        </member>
        <member name="T:Npgsql.DataRowLoadingMode">
            <summary>
            Specifies how to load/parse DataRow messages as they're received from the backend.
            </summary>
        </member>
        <member name="F:Npgsql.DataRowLoadingMode.NonSequential">
            <summary>
            Load DataRows in non-sequential mode
            </summary>
        </member>
        <member name="F:Npgsql.DataRowLoadingMode.Sequential">
            <summary>
            Load DataRows in sequential mode
            </summary>
        </member>
        <member name="F:Npgsql.DataRowLoadingMode.Skip">
            <summary>
            Skip DataRow messages altogether
            </summary>
        </member>
        <member name="T:Npgsql.ProvideClientCertificatesCallback">
            <summary>
            Represents the method that allows the application to provide a certificate collection to be used for SSL clien authentication
            </summary>
            <param name="certificates">A <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection">X509CertificateCollection</see> to be filled with one or more client certificates.</param>
        </member>
        <member name="T:Npgsql.ValidateRemoteCertificateCallback">
            <summary>
            Represents the method that is called to validate the certificate provided by the server during an SSL handshake
            </summary>
            <param name="cert">The server's certificate</param>
            <param name="chain">The certificate chain containing the certificate's CA and any intermediate authorities</param>
            <param name="errors">Any errors that were detected</param>
        </member>
        <member name="T:Npgsql.NpgsqlConnectorPool">
            <summary>
            This class manages all connector objects, pooled AND non-pooled.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlConnectorPool.ConnectorQueue">
            <summary>
            A queue with an extra Int32 for keeping track of busy connections.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnectorPool.ConnectorQueue.Available">
            <summary>
            Connections available to the end user
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnectorPool.ConnectorQueue.Busy">
            <summary>
            Connections currently in use
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlConnectorPool.ConnectorPoolMgr">
            <value>Unique static instance of the connector pool
            mamager.</value>
        </member>
        <member name="F:Npgsql.NpgsqlConnectorPool.PooledConnectors">
            <value>Map of index to unused pooled connectors, avaliable to the
            next RequestConnector() call.</value>
            <remarks>This hashmap will be indexed by connection string.
            This key will hold a list of queues of pooled connectors available to be used.</remarks>
        </member>
        <member name="F:Npgsql.NpgsqlConnectorPool.Timer">
            <value>Timer for tracking unused connections in pools.</value>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.RequestConnector(Npgsql.NpgsqlConnection)">
            <summary>
            Searches the pooled connector lists for a matching connector object or creates a new one.
            </summary>
            <param name="Connection">The NpgsqlConnection that is requesting
            the connector. Its ConnectionString will be used to search the
            pool for available connectors.</param>
            <returns>A connector object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.ReleaseConnector(Npgsql.NpgsqlConnection,Npgsql.NpgsqlConnector)">
            <summary>
            Releases a connector, possibly back to the pool for future use.
            </summary>
            <remarks>
            Pooled connectors will be put back into the pool if there is room.
            </remarks>
            <param name="Connection">Connection to which the connector is leased.</param>
            <param name="Connector">The connector to release.</param>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.GetPooledConnector(Npgsql.NpgsqlConnection)">
            <summary>
            Find an available pooled connector in the pool, or create a new one if none found.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectorPool.UngetConnector(Npgsql.NpgsqlConnection,Npgsql.NpgsqlConnector)">
            <summary>
            Put a pooled connector into the pool queue.
            </summary>
            <param name="Connection">Connection <paramref name="Connector"/> is leased to.</param>
            <param name="Connector">Connector to pool</param>
        </member>
        <member name="T:Npgsql.NpgsqlCopyFormat">
            <summary>
            Represents information about COPY operation data transfer format as returned by server.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyFormat.#ctor(System.Byte,System.Int16[])">
            <summary>
            Only created when a CopyInResponse or CopyOutResponse is received by NpgsqlState.ProcessBackendResponses()
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyFormat.IsBinary">
            <summary>
            Returns true if this operation is currently active and in binary format.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyFormat.FieldIsBinary(System.Int32)">
            <summary>
            Returns true if this operation is currently active and field at given location is in binary format.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyFormat.FieldCount">
            <summary>
            Returns number of fields if this operation is currently active, otherwise -1
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlCopyIn">
            <summary>
            Represents a PostgreSQL COPY FROM STDIN operation with a corresponding SQL statement
            to execute against a PostgreSQL database
            and an associated stream used to read data from (if provided by user)
            or for writing it (when generated by driver).
            Eg. new NpgsqlCopyIn("COPY mytable FROM STDIN", connection, streamToRead).Start();
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyIn.#ctor(System.String,Npgsql.NpgsqlConnection)">
            <summary>
            Creates NpgsqlCommand to run given query upon Start(). Data for the requested COPY IN operation can then be written to CopyData stream followed by a call to End() or Cancel().
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyIn.#ctor(Npgsql.NpgsqlCommand,Npgsql.NpgsqlConnection)">
            <summary>
            Given command is run upon Start(). Data for the requested COPY IN operation can then be written to CopyData stream followed by a call to End() or Cancel().
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyIn.#ctor(Npgsql.NpgsqlCommand,Npgsql.NpgsqlConnection,System.IO.Stream)">
            <summary>
            Given command is executed upon Start() and all data from fromStream is passed to it as copy data.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyIn.IsActive">
            <summary>
            Returns true if the connection is currently reserved for this operation.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyIn.CopyStream">
            <summary>
            The stream provided by user or generated upon Start().
            User may provide a stream to constructor; it is used to pass to server all data read from it.
            Otherwise, call to Start() sets this to a writable NpgsqlCopyInStream that passes all data written to it to server.
            In latter case this is only available while the copy operation is active and null otherwise.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyIn.IsBinary">
            <summary>
            Returns true if this operation is currently active and in binary format.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyIn.FieldIsBinary(System.Int32)">
            <summary>
            Returns true if this operation is currently active and field at given location is in binary format.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyIn.FieldCount">
            <summary>
            Returns number of fields expected on each input row if this operation is currently active, otherwise -1
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyIn.NpgsqlCommand">
            <summary>
            The Command used to execute this copy operation.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyIn.CopyBufferSize">
            <summary>
            Set before a COPY IN query to define size of internal buffer for reading from given CopyStream.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyIn.Start">
            <summary>
            Command specified upon creation is executed as a non-query.
            If CopyStream is set upon creation, it will be flushed to server as copy data, and operation will be finished immediately.
            Otherwise the CopyStream member can be used for writing copy data to server and operation finished with a call to End() or Cancel().
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyIn.End">
            <summary>
            Called after writing all data to CopyStream to successfully complete this copy operation.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyIn.Cancel(System.String)">
            <summary>
            Withdraws an already started copy operation. The operation will fail with given error message.
            Will do nothing if current operation is not active.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlCopyInStream">
            <summary>
            Stream for writing data to a table on a PostgreSQL version 7.4 or newer database during an active COPY FROM STDIN operation.
            <b>Passes data exactly as is and when given</b>, so see to it that you use server encoding, correct format and reasonably sized writes!
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyInStream.IsActive">
            <summary>
            True while this stream can be used to write copy data to server
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyInStream.#ctor(Npgsql.NpgsqlConnector)">
            <summary>
            Created only by NpgsqlCopyInState.StartCopy()
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyInStream.CanRead">
            <summary>
            False
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyInStream.CanWrite">
            <summary>
            True
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyInStream.CanSeek">
            <summary>
            False
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyInStream.Length">
            <summary>
            Number of bytes written so far
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyInStream.Position">
            <summary>
            Number of bytes written so far; not settable
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyInStream.Close">
            <summary>
            Successfully completes copying data to server. Returns after operation is finished.
            Does nothing if this stream is not the active copy operation writer.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyInStream.Cancel(System.String)">
            <summary>
            Withdraws an already started copy operation. The operation will fail with given error message.
            Does nothing if this stream is not the active copy operation writer.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyInStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes given bytes to server.
            Fails if this stream is not the active copy operation writer.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyInStream.Flush">
            <summary>
            Flushes stream contents to server.
            Fails if this stream is not the active copy operation writer.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyInStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not readable
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyInStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not seekable
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyInStream.SetLength(System.Int64)">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlCopyOut">
            <summary>
            Represents a PostgreSQL COPY TO STDOUT operation with a corresponding SQL statement
            to execute against a PostgreSQL database
            and an associated stream used to write results to (if provided by user)
            or for reading the results (when generated by driver).
            Eg. new NpgsqlCopyOut("COPY (SELECT * FROM mytable) TO STDOUT", connection, streamToWrite).Start();
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOut.#ctor(System.String,Npgsql.NpgsqlConnection)">
            <summary>
            Creates NpgsqlCommand to run given query upon Start(), after which CopyStream provides data from database as requested in the query.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOut.#ctor(Npgsql.NpgsqlCommand,Npgsql.NpgsqlConnection)">
            <summary>
            Given command is run upon Start(), after which CopyStream provides data from database as requested in the query.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOut.#ctor(Npgsql.NpgsqlCommand,Npgsql.NpgsqlConnection,System.IO.Stream)">
            <summary>
            Given command is executed upon Start() and all requested copy data is written to toStream immediately.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOut.IsActive">
            <summary>
            Returns true if the connection is currently reserved for this operation.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOut.CopyStream">
            <summary>
            The stream provided by user or generated upon Start()
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOut.NpgsqlCommand">
            <summary>
            The Command used to execute this copy operation.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOut.IsBinary">
            <summary>
            Returns true if this operation is currently active and in binary format.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOut.FieldIsBinary(System.Int32)">
            <summary>
            Returns true if this operation is currently active and field at given location is in binary format.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOut.FieldCount">
            <summary>
            Returns number of fields if this operation is currently active, otherwise -1
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOut.Start">
            <summary>
            Command specified upon creation is executed as a non-query.
            If CopyStream is set upon creation, all copy data from server will be written to it, and operation will be finished immediately.
            Otherwise the CopyStream member can be used for reading copy data from server until no more data is available.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOut.Read">
            <summary>
            Faster alternative to using the generated CopyStream.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOut.End">
            <summary>
            Flush generated CopyStream at once. Effectively reads and discard all the rest of copy data from server.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlCopyOutStream">
            <summary>
            Stream for reading data from a table or select on a PostgreSQL version 7.4 or newer database during an active COPY TO STDOUT operation.
            <b>Passes data exactly as provided by the server.</b>
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOutStream.IsActive">
            <summary>
            True while this stream can be used to read copy data from server
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOutStream.#ctor(Npgsql.NpgsqlConnector)">
            <summary>
            Created only by NpgsqlCopyOutState.StartCopy()
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOutStream.CanRead">
            <summary>
            True
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOutStream.CanWrite">
            <summary>
            False
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOutStream.CanSeek">
            <summary>
            False
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOutStream.Length">
            <summary>
            Number of bytes read so far
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopyOutStream.Position">
            <summary>
            Number of bytes read so far; can not be set.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOutStream.Close">
            <summary>
            Discards copy data as long as server pushes it. Returns after operation is finished.
            Does nothing if this stream is not the active copy operation reader.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOutStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not writable.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOutStream.Flush">
            <summary>
            Not flushable.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOutStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies data read from server to given byte buffer.
            Since server returns data row by row, length will differ each time, but it is only zero once the operation ends.
            Can be mixed with calls to the more efficient NpgsqlCopyOutStream.Read() : byte[] though that would not make much sense.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOutStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not seekable
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOutStream.SetLength(System.Int64)">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopyOutStream.Read">
            <summary>
            Returns a whole row of data from server without extra work.
            If standard Stream.Read(...) has been called before, it's internal buffers remains are returned.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlCopySerializer">
            <summary>
            Writes given objects into a stream for PostgreSQL COPY in default copy format (not CSV or BINARY).
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlCopySerializer.DEFAULT_DELIMITER">
            <summary>
            Default delimiter.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlCopySerializer.DEFAULT_SEPARATOR">
            <summary>
            Default separator.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlCopySerializer.DEFAULT_NULL">
            <summary>
            Default null.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlCopySerializer.DEFAULT_ESCAPE">
            <summary>
            Default escape.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlCopySerializer.DEFAULT_QUOTE">
            <summary>
            Default quote.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlCopySerializer.DEFAULT_BUFFER_SIZE">
            <summary>
            Default buffer size.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.#ctor(Npgsql.NpgsqlConnection)">
            <summary>
            Constructor.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="P:Npgsql.NpgsqlCopySerializer.IsActive">
            <summary>
            Report whether the serializer is active.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopySerializer.ToStream">
            <summary>
            To Stream.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopySerializer.Delimiter">
            <summary>
            Delimiter.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopySerializer.Separator">
            <summary>
            Separator.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopySerializer.Escape">
            <summary>
            Escape.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopySerializer.Null">
            <summary>
            Null.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopySerializer.BufferSize">
            <summary>
            Buffer size.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.Flush">
            <summary>
            Flush buffers.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.FlushRows">
            <summary>
            Flush rows.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.FlushFields">
            <summary>
            Flush fields.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.Close">
            <summary>
            Close the serializer.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopySerializer.SpaceInBuffer">
            <summary>
            Report whether space remains in the buffer.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopySerializer.StringsToEscape">
            <summary>
            Strings to escape.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlCopySerializer.EscapeSequenceBytes">
            <summary>
            Escape sequence bytes.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.EscapeSequenceFor(System.Char)">
            <summary>
            Escape sequence for the given character.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.MakeRoomForBytes(System.Int32)">
            <summary>
            Make room for bytes.
            </summary>
            <param name="len"></param>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.AddBytes(System.Byte[])">
            <summary>
            Add bytes.
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.EndRow">
            <summary>
            End row.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.PrefixField">
            <summary>
            Prefix field.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.FieldAdded">
            <summary>
            Field added.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.AddNull">
            <summary>
            Add null.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.AddString(System.String)">
            <summary>
            Add string.
            </summary>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.AddInt32(System.Int32)">
            <summary>
            add Int32.
            </summary>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.AddInt64(System.Int64)">
            <summary>
            Add Int64.
            </summary>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.AddNumber(System.Double)">
            <summary>
            Add number.
            </summary>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.AddBool(System.Boolean)">
            <summary>
            Add bool
            </summary>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Npgsql.NpgsqlCopySerializer.AddDateTime(System.DateTime)">
            <summary>
            Add DateTime.
            </summary>
            <param name="fieldValue"></param>
        </member>
        <member name="T:Npgsql.NpgsqlRowUpdatedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Npgsql.NpgsqlDataAdapter.RowUpdated">RowUpdated</see> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Npgsql.NpgsqlRowUpdatedEventArgs">NpgsqlRowUpdatedEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Npgsql.NpgsqlRowUpdatingEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:Npgsql.NpgsqlDataAdapter.RowUpdating">RowUpdating</see> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Npgsql.NpgsqlRowUpdatingEventArgs">NpgsqlRowUpdatingEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:Npgsql.NpgsqlDataAdapter">
            <summary>
            This class represents an adapter from many commands: select, update, insert and delete to fill <see cref="T:System.Data.DataSet">Datasets.</see>
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlDataAdapter.RowUpdated">
            <summary>
            Row updated event.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlDataAdapter.RowUpdating">
            <summary>
            Row updating event.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.#ctor(Npgsql.NpgsqlCommand)">
            <summary>
            Constructor.
            </summary>
            <param name="selectCommand"></param>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.#ctor(System.String,Npgsql.NpgsqlConnection)">
            <summary>
            Constructor.
            </summary>
            <param name="selectCommandText"></param>
            <param name="selectConnection"></param>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="selectCommandText"></param>
            <param name="selectConnectionString"></param>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Create row updated event.
            </summary>
            <param name="dataRow"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Create row updating event.
            </summary>
            <param name="dataRow"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Raise the RowUpdated event.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Npgsql.NpgsqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Raise the RowUpdating event.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Npgsql.NpgsqlDataAdapter.DeleteCommand">
            <summary>
            Delete command.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataAdapter.SelectCommand">
            <summary>
            Select command.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataAdapter.UpdateCommand">
            <summary>
            Update command.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataAdapter.InsertCommand">
            <summary>
            Insert command.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._readOneRow">
            <summary>
            Indicates that at least one row has been read across all result sets
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._hasRows">
            <summary>
            Whether the current result set has rows
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._pendingMessage">
            <summary>
            If HasRows was called before any rows were read, it was forced to read messages. A pending
            message may be stored here for processing in the next Read() or NextResult().
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._cachedSchemaTable">
            <summary>
            If <see cref="M:Npgsql.NpgsqlDataReader.GetSchemaTable"/> has been called, its results are cached here.
            </summary>
        </member>
        <member name="E:Npgsql.NpgsqlDataReader.ReaderClosed">
            <summary>
            Is raised whenever Close() is called.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader._rowCache">
            <summary>
            In non-sequential mode, contains the cached values already read from the current row
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.  Always returns zero.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.LastInsertedOID">
            <summary>
            Returns the OID of the last inserted row.
            If table is created without OIDs, this will always be 0.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.IsOnRow">
            <summary>
            Indicates whether the reader is currently positioned on a row, i.e. whether reading a
            column is possible.
            This property is different from <see cref="P:Npgsql.NpgsqlDataReader.HasRows"/> in that <see cref="P:Npgsql.NpgsqlDataReader.HasRows"/> will
            return true even if attempting to read a column will fail, e.g. before <see cref="M:Npgsql.NpgsqlDataReader.Read"/>
            has been called
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.Consume">
            <summary>
            Consumes all result sets for this reader, leaving the connector ready for sending and processing further
            queries
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlDataReader.Row">
            <summary>
            Returns the current row, or throws an exception if a row isn't available
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDate(System.Int32)">
            <summary>
            Gets the value of the specified column as an <see cref="T:NpgsqlTypes.NpgsqlDate"/>,
            Npgsql's provider-specific type for dates.
            </summary>
            <remarks>
            PostgreSQL's date type represents dates from 4713 BC to 5874897 AD, while .NET's DateTime
            only supports years from 1 to 1999. If you require years outside this range use this accessor.
            The standard <see cref="M:Npgsql.NpgsqlDataReader.GetProviderSpecificValue(System.Int32)"/> method will also return this type, but has
            the disadvantage of boxing the value.
            See http://www.postgresql.org/docs/9.4/static/datatype-datetime.html
            </remarks>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetTimeTZ(System.Int32)">
            <summary>
            Gets the value of the specified column as an <see cref="T:NpgsqlTypes.NpgsqlTimeTZ"/>,
            Npgsql's provider-specific type for dates.
            </summary>
            <remarks>
            PostgreSQL has a "time with time zone" type, which combines a time of day with a time zone.
            Since .NET contains no analog type, the PostgreSQL value can be fetched as <see cref="T:NpgsqlTypes.NpgsqlTimeTZ"/>.
            The standard ADO.NET <see cref="M:Npgsql.NpgsqlDataReader.GetProviderSpecificValue(System.Int32)"/> method will also return this
            type, but has the disadvantage of boxing the value.
            See http://www.postgresql.org/docs/9.4/static/datatype-datetime.html
            </remarks>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetTimeSpan(System.Int32)">
            <summary>
            Gets the value of the specified column as a TimeSpan,
            </summary>
            <remarks>
            PostgreSQL's interval type has has a resolution of 1 microsecond and ranges from
            -178000000 to 178000000 years, while .NET's TimeSpan has a resolution of 100 nanoseconds
            and ranges from roughly -29247 to 29247 years.
            See http://www.postgresql.org/docs/9.4/static/datatype-datetime.html
            </remarks>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetInterval(System.Int32)">
            <summary>
            Gets the value of the specified column as an <see cref="T:NpgsqlTypes.NpgsqlInterval"/>,
            Npgsql's provider-specific type for time spans.
            </summary>
            <remarks>
            PostgreSQL's interval type has has a resolution of 1 microsecond and ranges from
            -178000000 to 178000000 years, while .NET's TimeSpan has a resolution of 100 nanoseconds
            and ranges from roughly -29247 to 29247 years. If you require values from outside TimeSpan's
            range use this accessor.
            The standard ADO.NET <see cref="M:Npgsql.NpgsqlDataReader.GetProviderSpecificValue(System.Int32)"/> method will also return this
            type, but has the disadvantage of boxing the value.
            See http://www.postgresql.org/docs/9.4/static/datatype-datetime.html
            </remarks>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetTimeStamp(System.Int32)">
            <summary>
            Gets the value of the specified column as an <see cref="T:NpgsqlTypes.NpgsqlTimeStamp"/>,
            Npgsql's provider-specific type for date/time timestamps. Note that this type covers
            both PostgreSQL's "timestamp with time zone" and "timestamp without time zone" types,
            which differ only in how they are converted upon input/output.
            </summary>
            <remarks>
            PostgreSQL's timestamp type represents dates from 4713 BC to 5874897 AD, while .NET's DateTime
            only supports years from 1 to 1999. If you require years outside this range use this accessor.
            The standard <see cref="M:Npgsql.NpgsqlDataReader.GetProviderSpecificValue(System.Int32)"/> method will also return this type, but has
            the disadvantage of boxing the value.
            See http://www.postgresql.org/docs/9.4/static/datatype-datetime.html
            </remarks>
            <param name="ordinal">The zero-based column ordinal.</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            This will be the Postgresql type name (e.g. int4), not the .NET type (<see cref="M:Npgsql.NpgsqlDataReader.GetFieldType(System.Int32)"/>)
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.PopulateOutputParameters">
            <summary>
            The first row in a stored procedure command that has output parameters needs to be traversed twice -
            once for populating the output parameters and once for the actual result set traversal. So in this
            case we can't be sequential.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlDataReader.GetSchemaTable">
            <summary>
            Returns a System.Data.DataTable that describes the column metadata of the DataReader.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader.KeyLookup.PrimaryKey">
            <summary>
            Contains the column names as the keys
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlDataReader.KeyLookup.UniqueColumns">
            <summary>
            Contains all unique columns
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlError">
            <summary>
            This class represents the ErrorResponse and NoticeResponse message sent from PostgreSQL server.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Severity">
            <summary>
            Severity code.  All versions.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Code">
            <summary>
            Error code.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Message">
            <summary>
            Terse error message.  All versions.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Detail">
            <summary>
            Detailed error message.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Hint">
            <summary>
            Suggestion to help resolve the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Position">
            <summary>
            Position (one based) within the query string where the error was encounterd.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.InternalPosition">
            <summary>
            Position (one based) within the query string where the error was encounterd.  This position refers to an internal command executed for example inside a PL/pgSQL function. PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.InternalQuery">
            <summary>
            Internal query string where the error was encounterd.  This position refers to an internal command executed for example inside a PL/pgSQL function. PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Where">
            <summary>
            Trace back information.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.File">
            <summary>
            Source file (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Line">
            <summary>
            Source file line number (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.Routine">
            <summary>
            Source routine (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.SchemaName">
            <summary>
            Schema name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.TableName">
            <summary>
            Table name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.ColumnName">
            <summary>
            Column name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.DataTypeName">
            <summary>
            Data type of column which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.ConstraintName">
            <summary>
            Constraint name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.ErrorSql">
            <summary>
            String containing the sql sent which produced this error.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlError.ToString">
            <summary>
            Return a string representation of this error object.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlError.BackendProtocolVersion">
            <summary>
            Backend protocol version in use.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlNoticeEventArgs">
            <summary>
            EventArgs class to send Notice parameters, which are just NpgsqlError's in a lighter context.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlNoticeEventArgs.Notice">
            <summary>
            Notice information.
            </summary>
        </member>
        <member name="T:Npgsql.ErrorFieldTypeCode">
            <summary>
            Error and notice message field codes
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.Done">
            <summary>
            Terminator, marks the end of the error data.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.Severity">
            <summary>
            Severity: the field contents are ERROR, FATAL, or PANIC (in an error message),
            or WARNING, NOTICE, DEBUG, INFO, or LOG (in a notice message), or a localized
            translation of one of these. Always present.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.Code">
            <summary>
            Code: the SQLSTATE code for the error (see Appendix A). Not localizable. Always present.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.Message">
            <summary>
            Message: the primary human-readable error message. This should be accurate
            but terse (typically one line). Always present.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.Detail">
            <summary>
            Detail: an optional secondary error message carrying more detail about the problem.
            Might run to multiple lines.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.Hint">
            <summary>
            Hint: an optional suggestion what to do about the problem. This is intended to differ
            from Detail in that it offers advice (potentially inappropriate) rather than hard facts.
            Might run to multiple lines.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.Position">
            <summary>
            Position: the field value is a decimal ASCII integer, indicating an error cursor
            position as an index into the original query string. The first character has index 1,
            and positions are measured in characters not bytes.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.InternalPosition">
            <summary>
            Internal position: this is defined the same as the P field, but it is used when the
            cursor position refers to an internally generated command rather than the one submitted
            by the client.
            The q field will always appear when this field appears.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.InternalQuery">
            <summary>
            Internal query: the text of a failed internally-generated command.
            This could be, for example, a SQL query issued by a PL/pgSQL function.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.Where">
            <summary>
            Where: an indication of the context in which the error occurred.
            Presently this includes a call stack traceback of active procedural language functions
            and internally-generated queries. The trace is one entry per line, most recent first.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.SchemaName">
            <summary>
            Schema name: if the error was associated with a specific database object,
            the name of the schema containing that object, if any.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.TableName">
            <summary>
            Table name: if the error was associated with a specific table, the name of the table.
            (Refer to the schema name field for the name of the table's schema.)
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.ColumnName">
            <summary>
            Column name: if the error was associated with a specific table column, the name of the column.
            (Refer to the schema and table name fields to identify the table.)
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.DataTypeName">
            <summary>
            Data type name: if the error was associated with a specific data type, the name of the data type.
            (Refer to the schema name field for the name of the data type's schema.)
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.ConstraintName">
            <summary>
            Constraint name: if the error was associated with a specific constraint, the name of the constraint.
            Refer to fields listed above for the associated table or domain.
            (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.)
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.File">
            <summary>
            File: the file name of the source-code location where the error was reported.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.Line">
            <summary>
            Line: the line number of the source-code location where the error was reported.
            </summary>
        </member>
        <member name="F:Npgsql.ErrorFieldTypeCode.Routine">
            <summary>
            Routine: the name of the source-code routine reporting the error.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlException">
            <summary>
            The exception that is thrown when the PostgreSQL backend reports errors.
            Note that other errors (network issues, Npgsql client-side problems) are reported as regular
            .NET exceptions.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlException.#ctor(System.Collections.Generic.IList{Npgsql.NpgsqlError})">
            <summary>
            Construct a backend error exception based on a list of one or more
            backend errors.  The basic Exception.Message will be built from the
            first (usually the only) error in the list.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Get object data.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Npgsql.NpgsqlException.Item(System.Int32)">
            <summary>
            Provide access to the entire list of errors provided by the PostgreSQL backend.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Severity">
            <summary>
            Severity code.  All versions.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Code">
            <summary>
            Error code.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.BaseMessage">
            <summary>
            Basic error message.  All versions.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Detail">
            <summary>
            Detailed error message.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Hint">
            <summary>
            Suggestion to help resolve the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Position">
            <summary>
            Position (one based) within the query string where the error was encounterd.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Where">
            <summary>
            Trace back information.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.File">
            <summary>
            Source file (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Line">
            <summary>
            Source file line number (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Routine">
            <summary>
            Source routine (in backend) reporting the error.  PostgreSQL 7.4 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.SchemaName">
            <summary>
            Schema name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.TableName">
            <summary>
            Table name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.ColumnName">
            <summary>
            Column name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.DataTypeName">
            <summary>
            Data type of column which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.ConstraintName">
            <summary>
            Constraint name which relates to the error. PostgreSQL 9.3 and up.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.ErrorSql">
            <summary>
            String containing the sql sent which produced this error.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlException.Errors">
            <summary>
            Returns the entire list of errors provided by the PostgreSQL backend.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlException.ToString">
            <summary>
            Format a .NET style exception string.
            Include all errors in the list, including any hints.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlException.AppendString(System.IO.StringWriter,System.String,System.String)">
            <summary>
            Append a line to the given Stream, first checking for zero-length.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlFactory">
            <summary>
            A factory to create instances of various Npgsql objects.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlFactory.CreateCommand">
            <summary>
            Creates an NpgsqlCommand object.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlMediator">
            <summary>
             This class is responsible for serving as bridge between the backend
             protocol handling and the core classes. It is used as the mediator for
             exchanging data generated/sent from/to backend.
             </summary>
            
        </member>
        <member name="P:Npgsql.NpgsqlMediator.BackendCommandTimeout">
            <summary>
            The current command timeout on the backend.  This is set via "SET statement_timeout = (milliseconds)".
            A value of -1 means the backend's timeout value is unknown because it has not yet been set.
            </summary>
        </member>
        <member name="T:Npgsql.BackendMessage">
            <summary>
            Base class for all classes which represent a message sent by the PostgreSQL backend.
            </summary>
        </member>
        <member name="T:Npgsql.FrontendMessage">
            <summary>
            Base class for all classes which represent a message sent to the PostgreSQL backend.
            </summary>
        </member>
        <member name="M:Npgsql.FrontendMessage.Prepare">
            <summary>
            Called to prepare a message before writing to the buffer. Maybe through validation exceptions.
            </summary>
        </member>
        <member name="T:Npgsql.SimpleFrontendMessage">
            <summary>
            Represents a simple frontend message which is typically small and fits well within
            the write buffer. The message is first queries for the number of bytes it requires,
            and then writes itself out.
            </summary>
        </member>
        <member name="P:Npgsql.SimpleFrontendMessage.Length">
            <summary>
            Returns the number of bytes needed to write this message. Can only be called after
            <see cref="M:Npgsql.FrontendMessage.Prepare"/> has been called.
            </summary>
        </member>
        <member name="M:Npgsql.SimpleFrontendMessage.Write(Npgsql.NpgsqlBuffer)">
            <summary>
            Writes the message contents into the buffer. 
            </summary>
        </member>
        <member name="T:Npgsql.ComplexFrontendMessage">
            <summary>
            Represents an arbitrary-length message capable of flushing the buffer internally as it's
            writing itself out.
            </summary>
        </member>
        <member name="M:Npgsql.ComplexFrontendMessage.Write(Npgsql.NpgsqlBuffer)">
            <param name="buf">the buffer into which to write the message.</param>
            <param name="directBuf">
            an option buffer that, if returned, will be written to the server directly, bypassing our
            NpgsqlBuffer. This is an optimization hack for bytea.
            </param>
            <returns>
            Whether there was enough space in the buffer to contain the entire message.
            If false, the buffer should be flushed and write should be called again.
            </returns>
        </member>
        <member name="T:Npgsql.IClientMessage">
            <summary>
            For classes representing messages sent from the client to the server.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlNotificationEventArgs">
            <summary>
            EventArgs class to send Notification parameters.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlNotificationEventArgs.PID">
            <summary>
            Process ID of the PostgreSQL backend that sent this notification.
            </summary>
        </member>
        <member name="F:Npgsql.NpgsqlNotificationEventArgs.Condition">
            <summary>
            Condition that triggered that notification.
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlParameter">
            <summary>
             This class represents a parameter to a command that will be sent to server
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.BoundSize">
            <summary>
            The number of bytes the bound value of this parameter requires
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter name and a value of the new <b>NpgsqlParameter</b>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="value">An <see cref="T:System.Object">Object</see> that is the value of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
            <remarks>
            <p>When you specify an <see cref="T:System.Object">Object</see>
            in the value parameter, the <see cref="T:System.Data.DbType">DbType</see> is
            inferred from the .NET Framework type of the <b>Object</b>.</p>
            <p>When using this constructor, you must be aware of a possible misuse of the constructor which takes a DbType parameter.
            This happens when calling this constructor passing an int 0 and the compiler thinks you are passing a value of DbType.
            Use <code> Convert.ToInt32(value) </code> for example to have compiler calling the correct constructor.</p>
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            class with the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,System.Data.DbType)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:NpgsqlTypes.NpgsqlDbType">NpgsqlDbType</see> values.</param>
            <param name="size">The length of the parameter.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
            <param name="size">The length of the parameter.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:NpgsqlTypes.NpgsqlDbType">NpgsqlDbType</see> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.String,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:NpgsqlTypes.NpgsqlDbType">NpgsqlDbType</see> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection">ParameterDirection</see> values.</param>
            <param name="isNullable"><b>true</b> if the value of the field can be null, otherwise <b>false</b>.</param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> is resolved.</param>
            <param name="scale">The total number of decimal places to which
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> is resolved.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion">DataRowVersion</see> values.</param>
            <param name="value">An <see cref="T:System.Object">Object</see> that is the value
            of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            </summary>
            <param name="parameterName">The name of the parameter to map.</param>
            <param name="parameterType">One of the <see cref="T:System.Data.DbType">DbType</see> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection">ParameterDirection</see> values.</param>
            <param name="isNullable"><b>true</b> if the value of the field can be null, otherwise <b>false</b>.</param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> is resolved.</param>
            <param name="scale">The total number of decimal places to which
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> is resolved.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion">DataRowVersion</see> values.</param>
            <param name="value">An <see cref="T:System.Object">Object</see> that is the value
            of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>An <see cref="T:System.Object">Object</see> that is the value of the parameter.
            The default value is null.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.NpgsqlValue">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>An <see cref="T:System.Object">Object</see> that is the value of the parameter.
            The default value is null.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Direction">
            <summary>
            Gets or sets a value indicating whether the parameter is input-only,
            output-only, bidirectional, or a stored procedure return value parameter.
            </summary>
            <value>One of the <see cref="T:System.Data.ParameterDirection">ParameterDirection</see>
            values. The default is <b>Input</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Precision">
            <summary>
            Gets or sets the maximum number of digits used to represent the
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> property.
            </summary>
            <value>The maximum number of digits used to represent the
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> property.
            The default value is 0, which indicates that the data provider
            sets the precision for <b>Value</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Scale">
            <summary>
            Gets or sets the number of decimal places to which
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> is resolved.
            </summary>
            <value>The number of decimal places to which
            <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see> is resolved. The default is 0.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            </summary>
            <value>The maximum size, in bytes, of the data within the column.
            The default value is inferred from the parameter value.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.DbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType">DbType</see> of the parameter.
            </summary>
            <value>One of the <see cref="T:System.Data.DbType">DbType</see> values. The default is <b>Object</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.NpgsqlDbType">
            <summary>
            Gets or sets the <see cref="T:NpgsqlTypes.NpgsqlDbType">NpgsqlDbType</see> of the parameter.
            </summary>
            <value>One of the <see cref="T:NpgsqlTypes.NpgsqlDbType">NpgsqlDbType</see> values. The default is <b>Unknown</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.ParameterName">
            <summary>
            Gets or sets The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            </summary>
            <value>The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.
            The default is an empty string.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.SourceColumn">
            <summary>
            Gets or sets The name of the source column that is mapped to the
            <see cref="T:System.Data.DataSet">DataSet</see> and used for loading or
            returning the <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see>.
            </summary>
            <value>The name of the source column that is mapped to the
            <see cref="T:System.Data.DataSet">DataSet</see>. The default is an empty string.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion">DataRowVersion</see>
            to use when loading <see cref="P:Npgsql.NpgsqlParameter.Value">Value</see>.
            </summary>
            <value>One of the <see cref="T:System.Data.DataRowVersion">DataRowVersion</see> values.
            The default is <b>Current</b>.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.SourceColumnNullMapping">
            <summary>
            Source column mapping.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.CleanName">
            <summary>
            The name scrubbed of any optional marker
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlParameter.Collection">
            <summary>
            The collection to which this parameter belongs, if any.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.ResetDbType">
            <summary>
            Reset DBType.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameter.Clone">
            <summary>
            Creates a new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> that
            is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> that is a copy of this instance.</returns>
        </member>
        <member name="T:Npgsql.NpgsqlParameterCollection">
            <summary>
            Represents a collection of parameters relevant to a <see cref="T:Npgsql.NpgsqlCommand">NpgsqlCommand</see>
            as well as their respective mappings to columns in a <see cref="T:System.Data.DataSet">DataSet</see>.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the NpgsqlParameterCollection class.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.InvalidateHashLookups">
            <summary>
            Invalidate the hash lookup tables.  This should be done any time a change
            may throw the lookups out of sync with the list.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> with the specified name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to retrieve.</param>
            <value>The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> with the specified name, or a null reference if the parameter is not found.</value>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to retrieve.</param>
            <value>The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> at the specified index.</value>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(Npgsql.NpgsqlParameter)">
            <summary>
            Adds the specified <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.String,System.Object)">
            <summary>
            Obsolete. Use AddWithValue instead.
            </summary>
            <remarks>
            Use caution when using this overload of the
            <b>Add</b> method to specify integer parameter values.
            Because this overload takes a <i>value</i> of type Object,
            you must convert the integral value to an <b>Object</b>
            type when the value is zero, as the following C# example demonstrates.
            <code>parameters.Add(":pname", Convert.ToInt32(0));</code>
            If you do not perform this conversion, the compiler will assume you
            are attempting to call the NpgsqlParameterCollection.Add(string, DbType) overload.
            </remarks>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> given the specified parameter name and value.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
            <param name="value">The Value of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
            <returns>The paramater that was added.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddWithValue(System.String,NpgsqlTypes.NpgsqlDbType,System.Object)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> given the specified parameter name and value.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
            <param name="value">The Value of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
            <param name="parameterType">One of the NpgsqlDbType values.</param>
            <returns>The paramater that was added.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddWithValue(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.Object)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> given the specified parameter name and value.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
            <param name="value">The Value of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
            <param name="parameterType">One of the NpgsqlDbType values.</param>
            <param name="size">The length of the column.</param>
            <returns>The paramater that was added.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddWithValue(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.String,System.Object)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> given the specified parameter name and value.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>.</param>
            <param name="value">The Value of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
            <param name="parameterType">One of the NpgsqlDbType values.</param>
            <param name="size">The length of the column.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <returns>The paramater that was added.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.String,NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> given the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the DbType values.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> with the parameter name, the data type, and the column length.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the DbType values.</param>
            <param name="size">The length of the column.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.String,NpgsqlTypes.NpgsqlDbType,System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> with the parameter name, the data type, the column length, and the source column name.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="parameterType">One of the DbType values.</param>
            <param name="size">The length of the column.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <returns>The index of the new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the specified <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> from the collection using the parameter name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to retrieve.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Contains(System.String)">
            <summary>
            Gets a value indicating whether a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> with the specified parameter name exists in the collection.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns><b>true</b> if the collection contains the parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> in the collection with a specific parameter name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns>The zero-based location of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> in the collection.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.IsReadOnly">
            <summary>
            Report whether the collection is read only.  Always false.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> from the collection using a specific index.
            </summary>
            <param name="index">The zero-based index of the parameter.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index where the parameter is to be inserted within the collection.</param>
            <param name="oValue">The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Remove(System.String)">
            <summary>
            Removes the specified <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> from the collection.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to remove from the collection.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> from the collection.
            </summary>
            <param name="oValue">The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to remove from the collection.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Contains(System.Object)">
            <summary>
            Gets a value indicating whether a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> exists in the collection.
            </summary>
            <param name="value">The value of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns>true if the collection contains the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object; otherwise, false.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.TryGetValue(System.String,Npgsql.NpgsqlParameter@)">
            <summary>
            Gets a value indicating whether a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> with the specified parameter name exists in the collection.
            </summary>
            <param name="parameterName">The name of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <param name="parameter">A reference to the requested parameter is returned in this out param if it is found in the list.  This value is null if the parameter is not found.</param>
            <returns><b>true</b> if the collection contains the parameter and param will contain the parameter; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of a <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> in the collection.
            </summary>
            <param name="value">The value of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to find.</param>
            <returns>The zero-based index of the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object in the collection.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Add(System.Object)">
            <summary>
            Adds the specified <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object to the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see>.
            </summary>
            <param name="value">The <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> to add to the collection.</param>
            <returns>The zero-based index of the new <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> object.</returns>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.IsFixedSize">
            <summary>
            Report whether the collection is fixed size.  Always false.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.IsSynchronized">
            <summary>
            Report whether the collection is synchronized.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.Count">
            <summary>
            Gets the number of <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects in the collection.
            </summary>
            <value>The number of <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects in the collection.</value>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects from the <see cref="T:Npgsql.NpgsqlParameterCollection">NpgsqlParameterCollection</see> to the specified array.
            </summary>
            <param name="array">An <see cref="T:System.Array">Array</see> to which to copy the <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see> objects in the collection.</param>
            <param name="index">The starting index of the array.</param>
        </member>
        <member name="P:Npgsql.NpgsqlParameterCollection.SyncRoot">
            <summary>
            Sync root.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator">IEnumerator</see> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.AddRange(System.Array)">
            <summary>
            Add an Array of parameters to the collection.
            </summary>
            <param name="values">Parameters to add.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.GetParameter(System.String)">
            <summary>
            Get parameter.
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.GetParameter(System.Int32)">
            <summary>
            Get parameter.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Set parameter.
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Set parameter.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.CheckType(System.Object)">
            <summary>
            In methods taking an object as argument this method is used to verify
            that the argument has the type <see cref="T:Npgsql.NpgsqlParameter">NpgsqlParameter</see>
            </summary>
            <param name="Object">The object to verify</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.IndexOf(Npgsql.NpgsqlParameter)">
            <summary>
            Report the offset within the collection of the given parameter.
            </summary>
            <param name="item">Parameter to find.</param>
            <returns>Index of the parameter, or -1 if the parameter is not present.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Insert(System.Int32,Npgsql.NpgsqlParameter)">
            <summary>
            Insert the specified parameter into the collection.
            </summary>
            <param name="index">Index of the existing parameter before which to insert the new one.</param>
            <param name="item">Parameter to insert.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Contains(Npgsql.NpgsqlParameter)">
            <summary>
            Report whether the specified parameter is present in the collection.
            </summary>
            <param name="item">Parameter to find.</param>
            <returns>True if the parameter was found, otherwise false.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.Remove(Npgsql.NpgsqlParameter)">
            <summary>
            Remove the specified parameter from the collection.
            </summary>
            <param name="item">Parameter to remove.</param>
            <returns>True if the parameter was found and removed, otherwise false.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.CopyTo(Npgsql.NpgsqlParameter[],System.Int32)">
            <summary>
            Convert collection to a System.Array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">Starting index in destination array.</param>
        </member>
        <member name="M:Npgsql.NpgsqlParameterCollection.ToArray">
            <summary>
            Convert collection to a System.Array.
            </summary>
            <returns>NpgsqlParameter[]</returns>
        </member>
        <member name="T:Npgsql.NpgsqlParameterStatus">
             <summary>
             This class represents the ParameterStatus message sent from PostgreSQL
             server.
             </summary>
            
        </member>
        <member name="M:Npgsql.NpgsqlPromotableSinglePhaseNotification.Prepare">
            <summary>
            Used when a connection is closed
            </summary>
        </member>
        <member name="T:Npgsql.NpgsqlSchema">
            <summary>
            Provides the underlying mechanism for reading schema information.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetMetaDataCollections">
            <summary>
            Returns the MetaDataCollections that lists all possible collections.
            </summary>
            <returns>The MetaDataCollections</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetRestrictions">
            <summary>
            Returns the Restrictions that contains the meaning and position of the values in the restrictions array.
            </summary>
            <returns>The Restrictions</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetDatabases(Npgsql.NpgsqlConnection,System.String[])">
            <summary>
            Returns the Databases that contains a list of all accessable databases.
            </summary>
            <param name="conn">The database connection on which to run the metadataquery.</param>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Databases</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetTables(Npgsql.NpgsqlConnection,System.String[])">
            <summary>
            Returns the Tables that contains table and view names and the database and schema they come from.
            </summary>
            <param name="conn">The database connection on which to run the metadataquery.</param>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Tables</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetColumns(Npgsql.NpgsqlConnection,System.String[])">
            <summary>
            Returns the Columns that contains information about columns in tables.
            </summary>
            <param name="conn">The database connection on which to run the metadataquery.</param>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Columns.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetViews(Npgsql.NpgsqlConnection,System.String[])">
            <summary>
            Returns the Views that contains view names and the database and schema they come from.
            </summary>
            <param name="conn">The database connection on which to run the metadataquery.</param>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Views</returns>
        </member>
        <member name="M:Npgsql.NpgsqlSchema.GetUsers(Npgsql.NpgsqlConnection,System.String[])">
            <summary>
            Returns the Users containing user names and the sysid of those users.
            </summary>
            <param name="conn">The database connection on which to run the metadataquery.</param>
            <param name="restrictions">The restrictions to filter the collection.</param>
            <returns>The Users.</returns>
        </member>
        <member name="T:Npgsql.NpgsqlTransaction">
            <summary>
            Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlTransaction.Connection">
            <summary>
            Gets the <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>
            object associated with the transaction, or a null reference if the
            transaction is no longer valid.
            </summary>
            <value>The <see cref="T:Npgsql.NpgsqlConnection">NpgsqlConnection</see>
            object associated with the transaction.</value>
        </member>
        <member name="P:Npgsql.NpgsqlTransaction.DbConnection">
            <summary>
            DB connection.
            </summary>
        </member>
        <member name="P:Npgsql.NpgsqlTransaction.IsolationLevel">
            <summary>
            Specifies the <see cref="T:System.Data.IsolationLevel">IsolationLevel</see> for this transaction.
            </summary>
            <value>The <see cref="T:System.Data.IsolationLevel">IsolationLevel</see> for this transaction.
            The default is <b>ReadCommitted</b>.</value>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Commit">
            <summary>
            Commits the database transaction.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Rollback(System.String)">
            <summary>
            Rolls back a transaction from a pending savepoint state.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Save(System.String)">
            <summary>
            Creates a transaction save point.
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlTransaction.Cancel">
            <summary>
            Cancel the transaction without telling the backend about it.  This is
            used to make the transaction go away when closing a connection.
            </summary>
        </member>
        <member name="T:Npgsql.PGUtil">
            <summary>
             This class provides many util methods to handle
             reading and writing of PostgreSQL protocol messages.
             </summary>
            <summary>
             This class provides many util methods to handle
             reading and writing of PostgreSQL protocol messages.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ExtractServerVersion(System.String)">
            <summary>
            This method takes a version string as returned by SELECT VERSION() and returns
            a valid version string ("7.2.2" for example).
            This is only needed when running protocol version 2.
            This does not do any validity checks.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ReadString(System.IO.Stream)">
            <summary>
             This method gets a C NULL terminated string from the network stream.
             It keeps reading a byte in each time until a NULL byte is returned.
             It returns the resultant string of bytes read.
             This string is sent from backend.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ReadBytes(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads requested number of bytes from stream with retries until Stream.Read returns 0 or count is reached.
            </summary>
            <param name="stream">Stream to read</param>
            <param name="buffer">byte buffer to fill</param>
            <param name="offset">starting position to fill the buffer</param>
            <param name="count">number of bytes to read</param>
            <returns>The number of bytes read.  May be less than count if no more bytes are available.</returns>
        </member>
        <member name="M:Npgsql.PGUtil.ReadBytes(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads requested number of bytes from <paramref name="src"/>.  If output matches <paramref name="src"/> exactly, and <paramref name="forceCopy"/> == false, <paramref name="src"/> is returned directly.
            </summary>
            <param name="src">Source array.</param>
            <param name="offset">Starting position to read from <paramref name="src"/></param>
            <param name="count">Number of bytes to read</param>
            <param name="forceCopy">Force a copy, even if the output is an exact copy of <paramref name="src"/>.</param>
            <returns>byte[] containing data requested.</returns>
        </member>
        <member name="M:Npgsql.PGUtil.WriteString(System.IO.Stream,System.String)">
            <summary>
             This method writes a string to the network stream.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteString(System.IO.Stream,System.String,System.Object[])">
            <summary>
             This method writes a string to the network stream.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteStringNullTerminated(System.IO.Stream,System.String)">
            <summary>
             This method writes a C NULL terminated string to the network stream.
             It appends a NULL terminator to the end of the String.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteStringNullTerminated(System.IO.Stream,System.String,System.Object[])">
            <summary>
             This method writes a C NULL terminated string to the network stream.
             It appends a NULL terminator to the end of the String.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteByte(System.IO.Stream,System.Byte[])">
            <summary>
            This method writes a byte to the stream. It also enables logging of them.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteByteNullTerminated(System.IO.Stream,System.Byte[])">
            <summary>
            This method writes a byte to the stream. It also enables logging of them.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteBytes(System.IO.Stream,System.Byte[])">
            <summary>
            This method writes a set of bytes to the stream. It also enables logging of them.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteBytesNullTerminated(System.IO.Stream,System.Byte[])">
            <summary>
            This method writes a set of bytes to the stream. It also enables logging of them.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteLimString(System.IO.Stream,System.String,System.Int32)">
            <summary>
             This method writes a C NULL terminated string limited in length to the
             backend server.
             It pads the string with null bytes to the size specified.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteLimBytes(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
             This method writes a C NULL terminated byte[] limited in length to the
             backend server.
             It pads the string with null bytes to the size specified.
             </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteInt32(System.IO.Stream,System.Int32)">
            <summary>
            Write a 32-bit integer to the given stream in the correct byte order.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ReadInt32(System.IO.Stream)">
            <summary>
            Read a 32-bit integer from the given stream in the correct byte order.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ReadInt32(System.Byte[],System.Int32)">
            <summary>
            Read a 32-bit integer from the given array in the correct byte order.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.WriteInt16(System.IO.Stream,System.Int16)">
            <summary>
            Write a 16-bit integer to the given stream in the correct byte order.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ReadInt16(System.IO.Stream)">
            <summary>
            Read a 16-bit integer from the given stream in the correct byte order.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.ReadInt16(System.Byte[],System.Int32)">
            <summary>
            Read a 16-bit integer from the given array in the correct byte order.
            </summary>
        </member>
        <member name="M:Npgsql.PGUtil.HostNetworkByteOrderSwap(System.Byte[],System.Boolean)">
            <summary>
            Copy and possibly reverse a byte array, depending on host architecture endienness.
            </summary>
            <param name="src">Source byte array.</param>
            <param name="forceCopy">Force a copy even if no swap is performed.</param>
            <returns><paramref name="src"/>, reversed if on a little-endian architecture, copied if required.</returns>
        </member>
        <member name="M:Npgsql.PGUtil.HostNetworkByteOrderSwap(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Copy and possibly reverse a byte array, depending on host architecture endienness.
            </summary>
            <param name="src">Source byte array.</param>
            <param name="start">Starting offset in source array.</param>
            <param name="length">Number of bytes to copy.</param>
            <param name="forceCopy">Force a copy even if no swap is performed.</param>
            <returns><paramref name="src"/>, reversed if on a little-endian architecture, copied if required.</returns>
        </member>
        <member name="M:Npgsql.PGUtil.TaskFromResult``1(``0)">
            <summary>
            Creates a Task&lt;TResult&gt; that's completed successfully with the specified result.
            </summary>
            <remarks>
            In .NET 4.5 Task provides this. In .NET 4.0 with BCL.Async, TaskEx provides this. This
            method wraps the two.
            </remarks>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="result">The result to store into the completed task.</param>
            <returns>The successfully completed task.</returns>
        </member>
        <member name="M:Npgsql.PGUtil.ThrowIfReached(System.String)">
             <summary>
             Throws an exception with the given string and also invokes a contract failure, allowing the static checker
             to detect scenarios leading up to this error.
            
             See http://blogs.msdn.com/b/francesco/archive/2014/09/12/how-to-use-cccheck-to-prove-no-case-is-forgotten.aspx
             </summary>
             <param name="message">the exception message</param>
             <returns>an exception to be thrown</returns>
        </member>
        <member name="T:Npgsql.ProtocolVersion">
            <summary>
            Represent the frontend/backend protocol version.
            </summary>
        </member>
        <member name="T:Npgsql.QueryManager">
            <summary>
            Responsible for creating query messages and writing them to the wire.
            
            Contains some frequently-used queries as buffers ready to be sent.
            </summary>
        </member>
        <member name="T:Npgsql.SSPIHandler">
            <summary>
            A class to handle everything associated with SSPI authentication
            </summary>
        </member>
        <member name="T:Npgsql.SSPIHandler.SecBufferDesc">
            <summary>
            Simplified SecBufferDesc struct with only one SecBuffer
            </summary>
        </member>
        <member name="P:Npgsql.ITypeHandler.IsChunking">
            <summary>
            If true, the type handler reads values of totally arbitrary length. These type handlers are expected
            to  handle reading from socket on its own if the buffer doesn't contain enough data.
            Otherwise the entire column data is expected to be loaded in the buffer prior to Read() being invoked.
            </summary>
        </member>
        <member name="P:Npgsql.ITypeHandler.SupportsBinaryRead">
            <summary>
            Whether this type handler supports reading the binary Postgresql representation for its type.
            </summary>
        </member>
        <member name="T:Npgsql.ITypeHandler`1">
            <summary>
            A type handler that can read a value from a column and return it as type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the type of the value returned by this type handler</typeparam>
        </member>
        <member name="P:Npgsql.TypeHandler.SupportsBinaryRead">
            <summary>
            Whether this type handler supports reading the binary Postgresql representation for its type.
            </summary>
        </member>
        <member name="P:Npgsql.TypeHandler.IsChunking">
            <summary>
            If true, the type handler reads and writes values of totally arbitrary length.
            These type handlers are expected to handle reading from sockets and writing to them on their own
            if the buffer doesn't contain enough data (i.e. perform Ensure).
            Otherwise, the type handler expects the buffer to contain enough bytes prior to Read() and
            Write() being invoked by the framework.
            </summary>
        </member>
        <member name="T:Npgsql.ITypeHandlerWithPsv">
            <summary>
            A marking interface to allow us to know whether a given type handler has a provider-specific type
            distinct from its regular type
            </summary>
        </member>
        <member name="T:Npgsql.TypeHandlerWithPsv`2">
            <summary>
            A type handler that supports a provider-specific value which is different from the regular value (e.g.
            NpgsqlDate and DateTime)
            </summary>
            <typeparam name="T">the regular value type returned by this type handler</typeparam>
            <typeparam name="TPsv">the type of the provider-specific value returned by this type handler</typeparam>
        </member>
        <member name="M:Npgsql.TypeMappingAttribute.#ctor(System.String)">
            <summary>
            Read-only parameter, only used by "unknown"
            </summary>
        </member>
        <member name="P:Npgsql.TypeHandlerRegistry.Item(System.UInt32)">
            <summary>
            Looks up a type handler by its Postgresql type's OID.
            </summary>
            <param name="oid">A Postgresql type OID</param>
            <returns>A type handler that can be used to encode and decode values.</returns>
        </member>
        <member name="F:Npgsql.Messages.DataRowMessage.NumColumns">
            <summary>
            The number of columns in the current row
            </summary>
        </member>
        <member name="F:Npgsql.Messages.DataRowMessage.Column">
            <summary>
            The index of the column that we're on, i.e. that has already been parsed, is
            is memory and can be retrieved. Initialized to -1
            </summary>
        </member>
        <member name="F:Npgsql.Messages.DataRowMessage.PosInColumn">
            <summary>
            For streaming types (e.g. bytea, text), holds the current byte position within the column.
            Does not include the length prefix.
            </summary>
        </member>
        <member name="F:Npgsql.Messages.DataRowMessage.DecodedPosInColumn">
            <summary>
            For streaming types (e.g. bytea, text), holds the current "decoded" position within the column.
            For text, this is the character index. For text-encoded bytea, this holds the decoded position
            (i.e. the 3rd decoded (content) byte in a hex text-encoded bytea will occupy the 7th and 8th
            actual bytes).
            </summary>
        </member>
        <member name="F:Npgsql.Messages.DataRowMessage.ColumnLen">
            <summary>
            For streaming types (e.g. bytea), holds the byte length of the column.
            Does not include the length prefix.
            </summary>
        </member>
        <member name="F:Npgsql.Messages.DataRowMessage.DecodedColumnLen">
            <summary>
            For streaming types (e.g. bytea, text), holds the decoded length of the column.
            </summary>
        </member>
        <member name="F:Npgsql.Messages.DataRowMessage.IsStreaming">
            <summary>
            Indicates whether a stream is currently open on a column. No read may occur until the stream is closed.
            </summary>
        </member>
        <member name="M:Npgsql.Messages.DataRowMessage.SeekToColumn(System.Int32)">
            <summary>
            Places our position at the beginning of the given column, after the 4-byte length.
            The length is available in ColumnLen.
            </summary>
        </member>
        <member name="M:Npgsql.Messages.DataRowMessage.Consume">
            <summary>
            Consumes the current row, allowing the reader to read in the next one.
            </summary>
        </member>
        <member name="M:Npgsql.Messages.DataRowSequentialMessage.SeekToColumn(System.Int32)">
            <summary>
            Places our position at the beginning of the given column, after the 4-byte length.
            The length is available in ColumnLen.
            </summary>
        </member>
        <member name="T:Npgsql.Messages.RowDescriptionMessage">
            <summary>
            A RowDescription message sent from the backend.
            </summary>
            <remarks>
            See http://www.postgresql.org/docs/9.4/static/protocol-message-formats.html
            </remarks>
        </member>
        <member name="M:Npgsql.Messages.RowDescriptionMessage.GetFieldIndex(System.String)">
            <summary>
            Given a string name, returns the field's ordinal index in the row.
            </summary>
        </member>
        <member name="M:Npgsql.Messages.RowDescriptionMessage.TryGetFieldIndex(System.String,System.Int32@)">
            <summary>
            Given a string name, returns the field's ordinal index in the row.
            </summary>
        </member>
        <member name="T:Npgsql.Messages.FieldDescription">
            <summary>
            A descriptive record on a single field received from Postgresql.
            See RowDescription in http://www.postgresql.org/docs/9.4/static/protocol-message-formats.html
            </summary>
        </member>
        <member name="P:Npgsql.Messages.FieldDescription.Name">
            <summary>
            The field name.
            </summary>
        </member>
        <member name="P:Npgsql.Messages.FieldDescription.OID">
            <summary>
            The object ID of the field's data type.
            </summary>
        </member>
        <member name="P:Npgsql.Messages.FieldDescription.TypeSize">
            <summary>
            The data type size (see pg_type.typlen). Note that negative values denote variable-width types.
            </summary>
        </member>
        <member name="P:Npgsql.Messages.FieldDescription.TypeModifier">
            <summary>
            The type modifier (see pg_attribute.atttypmod). The meaning of the modifier is type-specific.
            </summary>
        </member>
        <member name="P:Npgsql.Messages.FieldDescription.TableOID">
            <summary>
            If the field can be identified as a column of a specific table, the object ID of the table; otherwise zero.
            </summary>
        </member>
        <member name="P:Npgsql.Messages.FieldDescription.ColumnAttributeNumber">
            <summary>
            If the field can be identified as a column of a specific table, the attribute number of the column; otherwise zero.
            </summary>
        </member>
        <member name="P:Npgsql.Messages.FieldDescription.FormatCode">
            <summary>
            The format code being used for the field.
            Currently will be zero (text) or one (binary).
            In a RowDescription returned from the statement variant of Describe, the format code is not yet known and will always be zero.
            </summary>
        </member>
        <member name="P:Npgsql.Messages.FieldDescription.Handler">
            <summary>
            The Npgsql type handler assigned to handle this field.
            </summary>
        </member>
        <member name="P:Npgsql.FrontendMessages.BindMessage.Portal">
            <summary>
            The name of the destination portal (an empty string selects the unnamed portal).
            </summary>
        </member>
        <member name="P:Npgsql.FrontendMessages.BindMessage.Statement">
            <summary>
            The name of the source prepared statement (an empty string selects the unnamed prepared statement).
            </summary>
        </member>
        <member name="P:Npgsql.FrontendMessages.CloseMessage.Name">
            <summary>
            The name of the prepared statement or portal to close (an empty string selects the unnamed prepared statement or portal).
            </summary>
        </member>
        <member name="P:Npgsql.FrontendMessages.CloseMessage.DescribeType">
            <summary>
            Whether to close a statement or a portal
            </summary>
        </member>
        <member name="P:Npgsql.FrontendMessages.DescribeMessage.Name">
            <summary>
            The name of the prepared statement or portal to describe (an empty string selects the unnamed prepared statement or portal).
            </summary>
        </member>
        <member name="P:Npgsql.FrontendMessages.DescribeMessage.DescribeType">
            <summary>
            Whether to describe a statement or a portal
            </summary>
        </member>
        <member name="P:Npgsql.FrontendMessages.ParseMessage.Query">
            <summary>
            The query string to be parsed.
            </summary>
        </member>
        <member name="P:Npgsql.FrontendMessages.ParseMessage.Statement">
            <summary>
            The name of the destination prepared statement (an empty string selects the unnamed prepared statement).
            </summary>
        </member>
        <member name="T:Npgsql.Localization.L10N">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ApplicationName">
            <summary>
              Looks up a localized string similar to ApplicationName.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ApplicationNameDescription">
            <summary>
              Looks up a localized string similar to ApplicationName.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.AuthenticationMethodNotSupported">
            <summary>
              Looks up a localized string similar to Only AuthenticationClearTextPassword and AuthenticationMD5Password supported for now. Received: {0}.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.BackendErrors">
            <summary>
              Looks up a localized string similar to There have been errors reported by the backend..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.CannotBeEmpty">
            <summary>
              Looks up a localized string similar to {0} cannot be empty.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.CloseError">
            <summary>
              Looks up a localized string similar to Error in Close().
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.CommandTimeout">
            <summary>
              Looks up a localized string similar to CommandTimeout.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.CommandTimeoutDescription">
            <summary>
              Looks up a localized string similar to CommandTimeout.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.CommandTimeoutLessZero">
            <summary>
              Looks up a localized string similar to CommandTimeout can&apos;t be less than zero..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.CommandTypeTableDirect">
            <summary>
              Looks up a localized string similar to Only Text and StoredProcedure types supported!.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.Compatible">
            <summary>
              Looks up a localized string similar to Npgsql Compatibility.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.CompatibleDescription">
            <summary>
              Looks up a localized string similar to Npgsql Compatibility.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnectionBroken">
            <summary>
              Looks up a localized string similar to The Connection is broken..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnectionLifeTime">
            <summary>
              Looks up a localized string similar to ConnectionLifeTime.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnectionLifeTimeDescription">
            <summary>
              Looks up a localized string similar to ConnectionLifeTime.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnectionNotOpen">
            <summary>
              Looks up a localized string similar to The Connection is not open..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnectionNull">
            <summary>
              Looks up a localized string similar to The Connection is not set..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnectionOrCommandTimeout">
            <summary>
              Looks up a localized string similar to A timeout has occured. If you were establishing a connection, increase Timeout value in ConnectionString. If you were executing a command, increase the CommandTimeout value in ConnectionString or in your NpgsqlCommand object..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnectionStringDescription">
            <summary>
              Looks up a localized string similar to Information used to connect to a PostgreSQL Database, such as &apos;Server=X;Port=X;Database=X;User Id=X;Password=X;&apos;.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnectionTimeout">
            <summary>
              Looks up a localized string similar to Connection establishment timeout. Increase Timeout value in ConnectionString..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnectionTimeoutDescription">
            <summary>
              Looks up a localized string similar to Current connection timeout value, &apos;Connect Timeout=X&apos; in the connection string.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnNotOpen">
            <summary>
              Looks up a localized string similar to Connection is not open.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnOpen">
            <summary>
              Looks up a localized string similar to Connection already open.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ConnStrEmpty">
            <summary>
              Looks up a localized string similar to ConnectionString cannot be empty..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.Database">
            <summary>
              Looks up a localized string similar to Database.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.DatabaseDescription">
            <summary>
              Looks up a localized string similar to Database.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.DataCategory_Advanced">
            <summary>
              Looks up a localized string similar to Advanced.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.DataCategory_Context">
            <summary>
              Looks up a localized string similar to Context.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.DataCategory_Initialization">
            <summary>
              Looks up a localized string similar to Initialization.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.DataCategory_Pooling">
            <summary>
              Looks up a localized string similar to Pooling.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.DataCategory_Security">
            <summary>
              Looks up a localized string similar to Security.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.DataCategory_Source">
            <summary>
              Looks up a localized string similar to Data Source.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.DnsLookupTimeout">
            <summary>
              Looks up a localized string similar to Dns hostname lookup timeout. Increase Timeout value in ConnectionString..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.Enlist">
            <summary>
              Looks up a localized string similar to Enlist.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.EnlistDescription">
            <summary>
              Looks up a localized string similar to Enlist.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.FailedConnection">
            <summary>
              Looks up a localized string similar to Failed to establish a connection to &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.Host">
            <summary>
              Looks up a localized string similar to Host.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.HostDescription">
            <summary>
              Looks up a localized string similar to Host.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ImpossibleToCast">
            <summary>
              Looks up a localized string similar to Can&apos;t cast {0} into any valid DbType..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.IntegerKeyValMax">
            <summary>
              Looks up a localized string similar to numeric value {0} in ConnectionString exceeds maximum value {1}.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.IntegerKeyValMin">
            <summary>
              Looks up a localized string similar to numeric value {0} in ConnectionString is below minimum value {1}.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.IntegratedSecurity">
            <summary>
              Looks up a localized string similar to IntegratedSecurity.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.IntegratedSecurityDescription">
            <summary>
              Looks up a localized string similar to IntegratedSecurity.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.InvalidBooleanKeyVal">
            <summary>
              Looks up a localized string similar to expecting {0}=[True/False] value in ConnectionString.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.InvalidDbName">
            <summary>
              Looks up a localized string similar to Invalid database name: {0}.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.InvalidFunctionName">
            <summary>
              Looks up a localized string similar to {0} does not exist in pg_proc.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.InvalidIntegerKeyVal">
            <summary>
              Looks up a localized string similar to expecting {0}=[Numeric] value in ConnectionString.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.InvalidParameterName">
            <summary>
              Looks up a localized string similar to Invalid parameter name: {0}.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.InvalidProtocolVersionKeyVal">
            <summary>
              Looks up a localized string similar to expecting {0}=[Protocol Version] value in ConnectionString.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.MaxPoolSize">
            <summary>
              Looks up a localized string similar to MaxPoolSize.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.MaxPoolSizeDescription">
            <summary>
              Looks up a localized string similar to MaxPoolSize.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.MediatorErrors">
            <summary>
              Looks up a localized string similar to There have been errors on {0}():.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.MediatorErrors_1P">
            <summary>
              Looks up a localized string similar to There have been errors on {0}({1}):.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.MinPoolSize">
            <summary>
              Looks up a localized string similar to MinPoolSize.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.MinPoolSizeDescription">
            <summary>
              Looks up a localized string similar to MinPoolSize.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.MissingConnStrArg">
            <summary>
              Looks up a localized string similar to Connection string argument missing!.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.MustBeBetweenXAndY">
            <summary>
              Looks up a localized string similar to {0} must be between {1} and {2}.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.NoNestedTransactions">
            <summary>
              Looks up a localized string similar to Nested/Concurrent transactions aren&apos;t supported..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.NoResultSetAvailable">
            <summary>
              Looks up a localized string similar to No resultset is currently being traversed.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.NoRowAvailable">
            <summary>
              Looks up a localized string similar to No row is available.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.NoTransaction">
            <summary>
              Looks up a localized string similar to No transaction in progress..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.OpenError">
            <summary>
              Looks up a localized string similar to There have been errors on Open().
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ParameterTypeIsOnlyArray">
            <summary>
              Looks up a localized string similar to Cannot set NpgsqlDbType to just Array, Binary-Or with the element type (e.g. Array of Box is NpgsqlDbType.Array | NpgsqlDbType.Box)..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ParamNotInQuery">
            <summary>
              Looks up a localized string similar to Parameter {0} not found in query..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.Password">
            <summary>
              Looks up a localized string similar to Password.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.PasswordDescription">
            <summary>
              Looks up a localized string similar to Password.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.Pooling">
            <summary>
              Looks up a localized string similar to Pooling.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.PoolingDescription">
            <summary>
              Looks up a localized string similar to Pooling.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.Port">
            <summary>
              Looks up a localized string similar to Port.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.PortDescription">
            <summary>
              Looks up a localized string similar to Port.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.PreloadReader">
            <summary>
              Looks up a localized string similar to PreloadReader.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.PreloadReaderDescription">
            <summary>
              Looks up a localized string similar to PreloadReader.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.Protocol">
            <summary>
              Looks up a localized string similar to Protocol Version.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ProtocolDescription">
            <summary>
              Looks up a localized string similar to Protocol Version.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.ReadOnlyWriteError">
            <summary>
              Looks up a localized string similar to The collection is read-only.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.RowSequentialFieldError">
            <summary>
              Looks up a localized string similar to Invalid attempt to read from column ordinal &apos;{0}&apos;. With CommandBehavior.SequentialAccess, you may only read from column ordinal &apos;{1}&apos; or greater..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SavePointNotSupported">
            <summary>
              Looks up a localized string similar to Savepoint is not supported by backend..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SavePointWithSemicolon">
            <summary>
              Looks up a localized string similar to Savepoint name cannot have semicolon..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SearchPath">
            <summary>
              Looks up a localized string similar to SearchPath.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SearchPathDescription">
            <summary>
              Looks up a localized string similar to SearchPath.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SetConnectionInTransaction">
            <summary>
              Looks up a localized string similar to The Connection property can&apos;t be changed with an uncommited transaction..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SetTransactionInTransaction">
            <summary>
              Looks up a localized string similar to The Transaction property can&apos;t be changed with an uncommited transaction..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SocketEx">
            <summary>
              Looks up a localized string similar to A SocketException occured.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SSL">
            <summary>
              Looks up a localized string similar to SSL.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SSLDescription">
            <summary>
              Looks up a localized string similar to SSL.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SslMode">
            <summary>
              Looks up a localized string similar to SSL Mode.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SslModeDescription">
            <summary>
              Looks up a localized string similar to SSL Mode.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SslRequestError">
            <summary>
              Looks up a localized string similar to Ssl connection requested. No Ssl enabled connection from this host is configured..
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SyncNotification">
            <summary>
              Looks up a localized string similar to SyncNotification.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.SyncNotificationDescription">
            <summary>
              Looks up a localized string similar to SyncNotification.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.Timeout">
            <summary>
              Looks up a localized string similar to Timeout.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.TimeoutDescription">
            <summary>
              Looks up a localized string similar to Timeout.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.UseExtendedTypes">
            <summary>
              Looks up a localized string similar to UseExtendedTypes.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.UseExtendedTypesDescription">
            <summary>
              Looks up a localized string similar to UseExtendedTypes.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.UserName">
            <summary>
              Looks up a localized string similar to Username.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.UserNameDescription">
            <summary>
              Looks up a localized string similar to Username.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.WrongKeyVal">
            <summary>
              Looks up a localized string similar to key=value argument incorrect in ConnectionString.
            </summary>
        </member>
        <member name="P:Npgsql.Localization.L10N.WrongType">
            <summary>
              Looks up a localized string similar to Can&apos;t cast {0} into NpgsqlParameter.
            </summary>
        </member>
        <member name="T:Npgsql.TypeHandlers.ArrayHandler">
            <summary>
            Base class for all type handlers which handle PostgreSQL arrays.
            </summary>
            <remarks>
            http://www.postgresql.org/docs/9.3/static/arrays.html
            </remarks>
        </member>
        <member name="P:Npgsql.TypeHandlers.ArrayHandler.ElementHandler">
            <summary>
            The type handler for the element that this array type holds
            </summary>
        </member>
        <member name="P:Npgsql.TypeHandlers.ArrayHandler.TextDelimiter">
            <summary>
            The delimiter character for this array.
            </summary>
        </member>
        <member name="M:Npgsql.TypeHandlers.ArrayHandler.PopulateOneDimensionalBinary``1(Npgsql.NpgsqlBuffer,Npgsql.Messages.FieldDescription,``0[])">
            <summary>
            Optimized population for one-dimensional arrays without boxing/unboxing
            </summary>
        </member>
        <member name="M:Npgsql.TypeHandlers.ArrayHandler.PopulateBinary``1(Npgsql.NpgsqlBuffer,Npgsql.Messages.FieldDescription,System.Int32[],System.Int32,System.Array,System.Int32[])">
            <summary>
            Recursively populates an array from PB binary data representation.
            </summary>
        </member>
        <member name="M:Npgsql.TypeHandlers.ArrayHandler.ReadText``1(Npgsql.NpgsqlBuffer,Npgsql.Messages.FieldDescription,System.Int32)">
            <summary>
            Creates an array from pg text representation.
            </summary>
        </member>
        <member name="M:Npgsql.TypeHandlers.ArrayHandler.ToArrayList``1(System.String,Npgsql.Messages.FieldDescription)">
            <summary>
            Creates an array list from pg represenation of an array.
            Multidimensional arrays are treated as ArrayLists of ArrayLists
            </summary>
        </member>
        <member name="M:Npgsql.TypeHandlers.ArrayHandler.ToArray``1(System.Collections.ArrayList)">
            <summary>
            Creates an n-dimensional array from an ArrayList of ArrayLists or
            a 1-dimensional array from something else.
            </summary>
            <param name="list"><see cref="T:System.Collections.ArrayList"/> to convert</param>
            <param name="elementType">Type of the elements in the list</param>
            <returns><see cref="T:System.Array"/> produced.</returns>
        </member>
        <member name="M:Npgsql.TypeHandlers.ArrayHandler.TokenEnumeration(System.String)">
            <summary>
            Takes a string representation of a pg 1-dimensional array
            (or a 1-dimensional row within an n-dimensional array)
            and allows enumeration of the string represenations of each items.
            </summary>
        </member>
        <member name="M:Npgsql.TypeHandlers.ArrayHandler.ArrayChunkEnumeration(System.String)">
            <summary>
            Takes a string representation of a pg n-dimensional array
            and allows enumeration of the string represenations of the next
            lower level of rows (which in turn can be taken as (n-1)-dimensional arrays.
            </summary>
        </member>
        <member name="T:Npgsql.TypeHandlers.ArrayHandler.IntSetIterator">
             <summary>
             Takes an array of ints and treats them like the limits of a set of counters.
             Retains a matching set of ints that is set to all zeros on the first ++
             On a ++ it increments the "right-most" int. If that int reaches it's
             limit it is set to zero and the one before it is incremented, and so on.
            
             Making this a more general purpose class is pretty straight-forward, but we'll just put what we need here.
             </summary>
        </member>
        <member name="M:Npgsql.TypeHandlers.ArrayHandler.RecursiveArrayListEnumeration(System.Collections.ArrayList)">
            <summary>
            Takes an ArrayList which may be an ArrayList of ArrayLists, an ArrayList of ArrayLists of ArrayLists
            and so on and enumerates the items that aren't ArrayLists (the leaf nodes if we think of the ArrayList
            passed as a tree). Simply uses the ArrayLists' own IEnumerators to get that of the next,
            pushing them onto a stack until we hit something that isn't an ArrayList.
            <param name="list"><see cref="T:System.Collections.ArrayList">ArrayList</see> to enumerate</param>
            <returns><see cref="T:System.Collections.IEnumerable">IEnumerable</see></returns>
            </summary>
        </member>
        <member name="T:Npgsql.TypeHandlers.ArrayHandler`1">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/arrays.html
            </remarks>
            <typeparam name="T">The .NET type contained as an element within this array</typeparam>
        </member>
        <member name="M:Npgsql.TypeHandlers.ArrayHandler`1.GetElementFieldType(Npgsql.Messages.FieldDescription)">
            <summary>
            The type of the elements contained within this array
            </summary>
            <param name="fieldDescription"></param>
        </member>
        <member name="M:Npgsql.TypeHandlers.ArrayHandler`1.GetElementPsvType(Npgsql.Messages.FieldDescription)">
            <summary>
            The provider-specific type of the elements contained within this array,
            </summary>
            <param name="fieldDescription"></param>
        </member>
        <member name="F:Npgsql.TypeHandlers.ArrayHandler`1._array">
            <summary>
            The array currently being written
            </summary>
        </member>
        <member name="T:Npgsql.TypeHandlers.ArrayHandlerWithPsv`2">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/arrays.html
            </remarks>
            <typeparam name="TNormal">The .NET type contained as an element within this array</typeparam>
            <typeparam name="TPsv">The .NET provider-specific type contained as an element within this array</typeparam>
        </member>
        <member name="M:Npgsql.TypeHandlers.ArrayHandlerWithPsv`2.GetElementPsvType(Npgsql.Messages.FieldDescription)">
            <summary>
            The provider-specific type of the elements contained within this array,
            </summary>
            <param name="fieldDescription"></param>
        </member>
        <member name="T:Npgsql.TypeHandlers.BitStringHandler">
            <summary>
            Handler for the PostgreSQL bit string type.
            Note that for BIT(1), this handler will return a bool by default, to align with SQLClient
            (see discussion https://github.com/npgsql/npgsql/pull/362#issuecomment-59622101).
            </summary>
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-bit.html
            </remarks>
        </member>
        <member name="M:Npgsql.TypeHandlers.BitStringHandler.ReadBinary(Npgsql.NpgsqlBuffer,Npgsql.Messages.FieldDescription,System.Int32)">
            <summary>
            Reads a BitArray from a binary PostgreSQL value. First 32-bit big endian length,
            then the data in big-endian. Zero-padded low bits in the end if length is not multiple of 8.
            </summary>
        </member>
        <member name="T:Npgsql.TypeHandlers.BitStringArrayHandler">
            <summary>
            A special handler for arrays of bit strings.
            Differs from the standard array handlers in that it returns arrays of bool for BIT(1) and arrays
            of BitArray otherwise (just like the scalar BitStringHandler does).
            </summary>
        </member>
        <member name="T:Npgsql.TypeHandlers.BoolHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-boolean.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.ByteaHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-binary.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.ByteaTextFormat">
            <summary>
            Indicates whether bytea text encoding uses the traditional escape format or the newer hex format.
            http://www.postgresql.org/docs/current/static/datatype-binary.html
            </summary>
        </member>
        <member name="F:Npgsql.TypeHandlers.ByteaTextFormat.Hex">
            <summary>
            The newer hex format (the default since Postgresql 9.0)
            </summary>
        </member>
        <member name="F:Npgsql.TypeHandlers.ByteaTextFormat.Escape">
            <summary>
            The traditional escape format
            </summary>
        </member>
        <member name="T:Npgsql.TypeHandlers.InternalCharHandler">
            <summary>
            Type handler for the Postgresql "char" type, used only internally
            </summary>
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-character.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.MoneyHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-money.html
            </remarks>
        </member>
        <member name="P:Npgsql.TypeHandlers.RangeHandler`1.ElementHandler">
            <summary>
            The type handler for the element that this range type holds
            </summary>
        </member>
        <member name="T:Npgsql.TypeHandlers.UnrecognizedTypeHandler">
            <summary>
            Handles "conversions" for columns sent by the database with unknown OIDs.
            This differs from TextHandler in that its a text-only handler (we don't want to receive binary
            representations of the types registered here).
            Note that this handler is also used in the very initial query that loads the OID mappings
            (chicken and egg problem).
            </summary>
        </member>
        <member name="T:Npgsql.TypeHandlers.UuidHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-uuid.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.DateTimeHandlers.DateHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-datetime.html
            </remarks>
        </member>
        <member name="M:Npgsql.TypeHandlers.DateTimeHandlers.DateHandler.ReadBinary(Npgsql.NpgsqlBuffer)">
            <remarks>
            Copied wholesale from Postgresql backend/utils/adt/datetime.c:j2date
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-datetime.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.DateTimeHandlers.TimeHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-datetime.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.DateTimeHandlers.TimeStampHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-datetime.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.DateTimeHandlers.TimeStampTzHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-datetime.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-datetime.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.GeometricHandlers.BoxHandler">
            <summary>
            Type handler for the PostgreSQL geometric box type.
            </summary>
            <remarks>
            http://www.postgresql.org/docs/9.4/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.GeometricHandlers.CircleHandler">
            <summary>
            Type handler for the PostgreSQL geometric circle type.
            </summary>
            <remarks>
            http://www.postgresql.org/docs/9.4/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.GeometricHandlers.LineHandler">
            <summary>
            Type handler for the PostgreSQL geometric line type.
            </summary>
            <remarks>
            http://www.postgresql.org/docs/9.4/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.GeometricHandlers.LineSegmentHandler">
            <summary>
            Type handler for the PostgreSQL geometric line segment type.
            </summary>
            <remarks>
            http://www.postgresql.org/docs/9.4/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.GeometricHandlers.PathHandler">
            <summary>
            Type handler for the PostgreSQL geometric path segment type (open or closed).
            </summary>
            <remarks>
            http://www.postgresql.org/docs/9.4/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.GeometricHandlers.PointHandler">
            <summary>
            Type handler for the PostgreSQL geometric point type.
            </summary>
            <remarks>
            http://www.postgresql.org/docs/9.4/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.GeometricHandlers.PolygonHandler">
            <summary>
            Type handler for the PostgreSQL geometric polygon type.
            </summary>
            <remarks>
            http://www.postgresql.org/docs/9.4/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.NetworkHandlers.CidrHandler">
            <remarks>
            http://www.postgresql.org/docs/9.4/static/datatype-net-types.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.NetworkHandlers.InetHandler">
            <remarks>
            http://www.postgresql.org/docs/9.4/static/datatype-net-types.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.NetworkHandlers.MacaddrHandler">
            <remarks>
            http://www.postgresql.org/docs/9.4/static/datatype-net-types.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.NumericHandlers.DoubleHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-numeric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.NumericHandlers.Int16Handler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-numeric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.NumericHandlers.Int32Handler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-numeric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.NumericHandlers.Int64Handler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-numeric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.NumericHandlers.NumericHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-numeric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.NumericHandlers.SingleHandler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-numeric.html
            </remarks>
        </member>
        <member name="T:Npgsql.TypeHandlers.NumericHandlers.UInt32Handler">
            <remarks>
            http://www.postgresql.org/docs/9.3/static/datatype-oid.html
            </remarks>
        </member>
        <member name="T:NpgsqlTypes.ArrayNativeToBackendTypeConverter">
            <summary>
            Handles serialisation of .NET array or IEnumeration to pg format.
            Arrays of arrays, enumerations of enumerations, arrays of enumerations etc.
            are treated as multi-dimensional arrays (in much the same manner as an array of arrays
            is used to emulate multi-dimensional arrays in languages that lack native support for them).
            If such an enumeration of enumerations is "jagged" (as opposed to rectangular, cuboid,
            hypercuboid, hyperhypercuboid, etc) then this class will "correctly" serialise it, but pg
            will raise an error as it doesn't allow jagged arrays.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ArrayNativeToBackendTypeConverter.#ctor(NpgsqlTypes.NpgsqlNativeTypeInfo)">
            <summary>
            Create an ArrayNativeToBackendTypeConverter with the element converter passed
            </summary>
            <param name="elementConverter">The <see cref="T:NpgsqlTypes.NpgsqlNativeTypeInfo"/> that would be used to serialise the element type.</param>
        </member>
        <member name="M:NpgsqlTypes.ArrayNativeToBackendTypeConverter.ArrayToArrayText(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Serialise the enumeration or array.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ArrayNativeToBackendTypeConverter.ArrayToArrayBinary(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,NpgsqlTypes.NativeToBackendTypeConverterOptions)">
            <summary>
            Convert a System.Array to PG binary format.
            Write the array header and prepare to write array data to the stream.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ArrayNativeToBackendTypeConverter.WriteBinaryArrayData(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Array,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.IO.MemoryStream,System.Int32,System.Int32[])">
            <summary>
            Append all array data to the binary stream.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.ArrayBackendToNativeTypeConverter">
            <summary>
            Handles parsing of pg arrays into .NET arrays.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ArrayBackendToNativeTypeConverter.TokenEnumeration(System.String)">
            <summary>
            Takes a string representation of a pg 1-dimensional array
            (or a 1-dimensional row within an n-dimensional array)
            and allows enumeration of the string represenations of each items.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ArrayBackendToNativeTypeConverter.ArrayChunkEnumeration(System.String)">
            <summary>
            Takes a string representation of a pg n-dimensional array
            and allows enumeration of the string represenations of the next
            lower level of rows (which in turn can be taken as (n-1)-dimensional arrays.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.ArrayBackendToNativeTypeConverter.IntSetIterator">
             <summary>
             Takes an array of ints and treats them like the limits of a set of counters.
             Retains a matching set of ints that is set to all zeros on the first ++
             On a ++ it increments the "right-most" int. If that int reaches it's
             limit it is set to zero and the one before it is incremented, and so on.
            
             Making this a more general purpose class is pretty straight-forward, but we'll just put what we need here.
             </summary>
        </member>
        <member name="M:NpgsqlTypes.ArrayBackendToNativeTypeConverter.RecursiveArrayListEnumeration(System.Collections.ArrayList)">
            <summary>
            Takes an ArrayList which may be an ArrayList of ArrayLists, an ArrayList of ArrayLists of ArrayLists
            and so on and enumerates the items that aren't ArrayLists (the leaf nodes if we think of the ArrayList
            passed as a tree). Simply uses the ArrayLists' own IEnumerators to get that of the next,
            pushing them onto a stack until we hit something that isn't an ArrayList.
            <param name="list"><see cref="T:System.Collections.ArrayList">ArrayList</see> to enumerate</param>
            <returns><see cref="T:System.Collections.IEnumerable">IEnumerable</see></returns>
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ArrayBackendToNativeTypeConverter.#ctor(NpgsqlTypes.NpgsqlBackendTypeInfo)">
            <summary>
            Create a new ArrayBackendToNativeTypeConverter
            </summary>
            <param name="elementConverter"><see cref="T:NpgsqlTypes.NpgsqlBackendTypeInfo"/> for the element type.</param>
        </member>
        <member name="M:NpgsqlTypes.ArrayBackendToNativeTypeConverter.ArrayTextToArray(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Creates an array from pg text representation.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ArrayBackendToNativeTypeConverter.ToArrayList(NpgsqlTypes.NpgsqlBackendTypeInfo,System.String,System.Int16,System.Int32)">
            <summary>
            Creates an array list from pg represenation of an array.
            Multidimensional arrays are treated as ArrayLists of ArrayLists
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ArrayBackendToNativeTypeConverter.ToArray(System.Collections.ArrayList,System.Type)">
            <summary>
            Creates an n-dimensional array from an ArrayList of ArrayLists or
            a 1-dimensional array from something else.
            </summary>
            <param name="list"><see cref="T:System.Collections.ArrayList"/> to convert</param>
            <param name="elementType">Type of the elements in the list</param>
            <returns><see cref="T:System.Array"/> produced.</returns>
        </member>
        <member name="M:NpgsqlTypes.ArrayBackendToNativeTypeConverter.ArrayBinaryToArray(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates an n-dimensional System.Array from PG binary representation.
            This function reads the array header and sets up an n-dimensional System.Array object to hold its data.
            PopulateArrayFromBinaryArray() is then called to carry out array population.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ArrayBackendToNativeTypeConverter.PopulateArrayFromBinaryArray(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32[],System.Int32[],System.Int32,System.Array,System.Int32[])">
            <summary>
            Recursively populates an array from PB binary data representation.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlInterval">
            <summary>
            Represents the PostgreSQL interval datatype.
            <remarks>PostgreSQL differs from .NET in how it's interval type doesn't assume 24 hours in a day
            (to deal with 23- and 25-hour days caused by daylight savings adjustments) and has a concept
            of months that doesn't exist in .NET's <see cref="T:System.TimeSpan"/> class. (Neither datatype
            has any concessions for leap-seconds).
            <para>For most uses just casting to and from TimeSpan will work correctly &#x2014; in particular,
            the results of subtracting one <see cref="T:System.DateTime"/> or the PostgreSQL date, time and
            timestamp types from another should be the same whether you do so in .NET or PostgreSQL &#x2014;
            but if the handling of days and months in PostgreSQL is important to your application then you
            should use this class instead of <see cref="T:System.TimeSpan"/>.</para>
            <para>If you don't know whether these differences are important to your application, they
            probably arent! Just use <see cref="T:System.TimeSpan"/> and do not use this class directly &#x263a;</para>
            <para>To avoid forcing unnecessary provider-specific concerns on users who need not be concerned
            with them a call to <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)"/> on a field containing an
            <see cref="T:NpgsqlTypes.NpgsqlInterval"/> value will return a <see cref="T:System.TimeSpan"/> rather than an
            <see cref="T:NpgsqlTypes.NpgsqlInterval"/>. If you need the extra functionality of <see cref="T:NpgsqlTypes.NpgsqlInterval"/>
            then use <see cref="M:Npgsql.NpgsqlDataReader.GetInterval(System.Int32)"/>.</para>
            </remarks>
            <seealso cref="P:NpgsqlTypes.NpgsqlInterval.Ticks"/>
            <seealso cref="M:NpgsqlTypes.NpgsqlInterval.JustifyDays"/>
            <seealso cref="M:NpgsqlTypes.NpgsqlInterval.JustifyMonths"/>
            <seealso cref="M:NpgsqlTypes.NpgsqlInterval.Canonicalize"/>
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.TicksPerMicrosecond">
            <summary>
            Represents the number of ticks (100ns periods) in one microsecond. This field is constant.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.TicksPerMillsecond">
            <summary>
            Represents the number of ticks (100ns periods) in one millisecond. This field is constant.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.TicksPerSecond">
            <summary>
            Represents the number of ticks (100ns periods) in one second. This field is constant.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.TicksPerMinute">
            <summary>
            Represents the number of ticks (100ns periods) in one minute. This field is constant.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.TicksPerHour">
            <summary>
            Represents the number of ticks (100ns periods) in one hour. This field is constant.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.TicksPerDay">
            <summary>
            Represents the number of ticks (100ns periods) in one day. This field is constant.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.HoursPerDay">
            <summary>
            Represents the number of hours in one day (assuming no daylight savings adjustments). This field is constant.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.DaysPerMonth">
            <summary>
            Represents the number of days assumed in one month if month justification or unjustifcation is performed.
            This is set to 30 for consistency with PostgreSQL. Note that this is means that month adjustments cause
            a year to be taken as 30 &#xd7; 12 = 360 rather than 356/366 days.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.TicksPerMonth">
            <summary>
            Represents the number of ticks (100ns periods) in one day, assuming 30 days per month. <seealso cref="F:NpgsqlTypes.NpgsqlInterval.DaysPerMonth"/>
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.MonthsPerYear">
            <summary>
            Represents the number of months in a year. This field is constant.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.MaxValue">
            <summary>
            Represents the maximum <see cref="T:NpgsqlTypes.NpgsqlInterval"/>. This field is read-only.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.MinValue">
            <summary>
            Represents the minimum <see cref="T:NpgsqlTypes.NpgsqlInterval"/>. This field is read-only.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlInterval.Zero">
            <summary>
            Represents the zero <see cref="T:NpgsqlTypes.NpgsqlInterval"/>. This field is read-only.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.#ctor(System.Int64)">
            <summary>
            Initializes a new <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to the specified number of ticks.
            </summary>
            <param name="ticks">A time period expressed in 100ns units.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to hold the same time as a <see cref="T:System.TimeSpan"/>
            </summary>
            <param name="timespan">A time period expressed in a <see cref="T:System.TimeSpan"/></param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.#ctor(System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to the specified number of months, days
            &amp; ticks.
            </summary>
            <param name="months">Number of months.</param>
            <param name="days">Number of days.</param>
            <param name="ticks">Number of 100ns units.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to the specified number of
            days, hours, minutes &amp; seconds.
            </summary>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to the specified number of
            days, hours, minutes, seconds &amp; milliseconds.
            </summary>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="milliseconds">Number of milliseconds.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to the specified number of
            months, days, hours, minutes, seconds &amp; milliseconds.
            </summary>
            <param name="months">Number of months.</param>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="milliseconds">Number of milliseconds.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to the specified number of
            years, months, days, hours, minutes, seconds &amp; milliseconds.
            <para>Years are calculated exactly equivalent to 12 months.</para>
            </summary>
            <param name="years">Number of years.</param>
            <param name="months">Number of months.</param>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="milliseconds">Number of milliseconds.</param>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Ticks">
            <summary>
            The total number of ticks(100ns units) contained. This is the resolution of the
            <see cref="T:NpgsqlTypes.NpgsqlInterval"/>  type. This ignores the number of days and
            months held. If you want them included use <see cref="M:NpgsqlTypes.NpgsqlInterval.UnjustifyInterval"/> first.
            <remarks>The resolution of the PostgreSQL
            interval type is by default 1&#xb5;s = 1,000 ns. It may be smaller as follows:
            <list type="number">
            <item>
            <term>interval(0)</term>
            <description>resolution of 1s (1 second)</description>
            </item>
            <item>
            <term>interval(1)</term>
            <description>resolution of 100ms = 0.1s (100 milliseconds)</description>
            </item>
            <item>
            <term>interval(2)</term>
            <description>resolution of 10ms = 0.01s (10 milliseconds)</description>
            </item>
            <item>
            <term>interval(3)</term>
            <description>resolution of 1ms = 0.001s (1 millisecond)</description>
            </item>
            <item>
            <term>interval(4)</term>
            <description>resolution of 100&#xb5;s = 0.0001s (100 microseconds)</description>
            </item>
            <item>
            <term>interval(5)</term>
            <description>resolution of 10&#xb5;s = 0.00001s (10 microseconds)</description>
            </item>
            <item>
            <term>interval(6) or interval</term>
            <description>resolution of 1&#xb5;s = 0.000001s (1 microsecond)</description>
            </item>
            </list>
            <para>As such, if the 100-nanosecond resolution is significant to an application, a PostgreSQL interval will
            not suffice for those purposes.</para>
            <para>In more frequent cases though, the resolution of the interval suffices.
            <see cref="T:NpgsqlTypes.NpgsqlInterval"/> will always suffice to handle the resolution of any interval value, and upon
            writing to the database, will be rounded to the resolution used.</para>
            </remarks>
            <returns>The number of ticks in the instance.</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Microseconds">
            <summary>
            Gets the number of whole microseconds held in the instance.
            <returns>An  in the range [-999999, 999999].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Milliseconds">
            <summary>
            Gets the number of whole milliseconds held in the instance.
            <returns>An  in the range [-999, 999].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Seconds">
            <summary>
            Gets the number of whole seconds held in the instance.
            <returns>An  in the range [-59, 59].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Minutes">
            <summary>
            Gets the number of whole minutes held in the instance.
            <returns>An  in the range [-59, 59].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Hours">
            <summary>
            Gets the number of whole hours held in the instance.
            <remarks>Note that this can be less than -23 or greater than 23 unless <see cref="M:NpgsqlTypes.NpgsqlInterval.JustifyDays"/>
            has been used to produce this instance.</remarks>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Days">
            <summary>
            Gets the number of days held in the instance.
            <remarks>Note that this does not pay attention to a time component with -24 or less hours or
            24 or more hours, unless <see cref="M:NpgsqlTypes.NpgsqlInterval.JustifyDays"/> has been called to produce this instance.</remarks>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Months">
            <summary>
            Gets the number of months held in the instance.
            <remarks>Note that this does not pay attention to a day component with -30 or less days or
            30 or more days, unless <see cref="M:NpgsqlTypes.NpgsqlInterval.JustifyMonths"/> has been called to produce this instance.</remarks>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.Time">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> representing the time component of the instance.
            <remarks>Note that this may have a value beyond the range &#xb1;23:59:59.9999999 unless
            <see cref="M:NpgsqlTypes.NpgsqlInterval.JustifyDays"/> has been called to produce this instance.</remarks>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.TotalTicks">
            <summary>
            The total number of ticks (100ns units) in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.TotalMicroseconds">
            <summary>
            The total number of microseconds in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.TotalMilliseconds">
            <summary>
            The total number of milliseconds in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.TotalSeconds">
            <summary>
            The total number of seconds in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.TotalMinutes">
            <summary>
            The total number of minutes in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.TotalHours">
            <summary>
            The total number of hours in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.TotalDays">
            <summary>
            The total number of days in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlInterval.TotalMonths">
            <summary>
            The total number of months in the instance, assuming 24 hours in each day and
            30 days in a month.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.FromTicks(System.Int64)">
            <summary>
            Creates an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> from a number of ticks.
            </summary>
            <param name="ticks">The number of ticks (100ns units) in the interval.</param>
            <returns>A <see cref="M:NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:NpgsqlTypes.NpgsqlInterval"/> with the given number of ticks.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.FromMicroseconds(System.Double)">
            <summary>
            Creates an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> from a number of microseconds.
            </summary>
            <param name="micro">The number of microseconds in the interval.</param>
            <returns>A <see cref="M:NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:NpgsqlTypes.NpgsqlInterval"/> with the given number of microseconds.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.FromMilliseconds(System.Double)">
            <summary>
            Creates an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> from a number of milliseconds.
            </summary>
            <param name="milli">The number of milliseconds in the interval.</param>
            <returns>A <see cref="M:NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:NpgsqlTypes.NpgsqlInterval"/> with the given number of milliseconds.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.FromSeconds(System.Double)">
            <summary>
            Creates an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> from a number of seconds.
            </summary>
            <param name="seconds">The number of seconds in the interval.</param>
            <returns>A <see cref="M:NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:NpgsqlTypes.NpgsqlInterval"/> with the given number of seconds.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.FromMinutes(System.Double)">
            <summary>
            Creates an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> from a number of minutes.
            </summary>
            <param name="minutes">The number of minutes in the interval.</param>
            <returns>A <see cref="M:NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:NpgsqlTypes.NpgsqlInterval"/> with the given number of minutes.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.FromHours(System.Double)">
            <summary>
            Creates an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> from a number of hours.
            </summary>
            <param name="hours">The number of hours in the interval.</param>
            <returns>A <see cref="M:NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:NpgsqlTypes.NpgsqlInterval"/> with the given number of hours.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.FromDays(System.Double)">
            <summary>
            Creates an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> from a number of days.
            </summary>
            <param name="days">The number of days in the interval.</param>
            <returns>A <see cref="M:NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:NpgsqlTypes.NpgsqlInterval"/> with the given number of days.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.FromMonths(System.Double)">
            <summary>
            Creates an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> from a number of months.
            </summary>
            <param name="months">The number of months in the interval.</param>
            <returns>A <see cref="M:NpgsqlTypes.NpgsqlInterval.Canonicalize"/>d <see cref="T:NpgsqlTypes.NpgsqlInterval"/> with the given number of months.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.Add(NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Adds another interval to this instance and returns the result.
            </summary>
            <param name="interval">An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to add to this instance.</param>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"></see> whose values are the sums of the two instances.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.Subtract(NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Subtracts another interval from this instance and returns the result.
            </summary>
            <param name="interval">An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to subtract from this instance.</param>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"></see> whose values are the differences of the two instances.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.Negate">
            <summary>
            Returns an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> whose value is the negated value of this instance.
            </summary>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> whose value is the negated value of this instance.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.Duration">
            <summary>
            This absolute value of this instance. In the case of some, but not all, components being negative,
            the rules used for justification are used to determine if the instance is positive or negative.
            </summary>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> whose value is the absolute value of this instance.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.JustifyDays">
            <summary>
            Equivalent to PostgreSQL's justify_days function.
            </summary>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> based on this one, but with any hours outside of the range [-23, 23]
            converted into days.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.UnjustifyDays">
            <summary>
            Opposite to PostgreSQL's justify_days function.
            </summary>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> based on this one, but with any days converted to multiples of &#xB1;24hours.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.JustifyMonths">
            <summary>
            Equivalent to PostgreSQL's justify_months function.
            </summary>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> based on this one, but with any days outside of the range [-30, 30]
            converted into months.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.UnjustifyMonths">
            <summary>
            Opposite to PostgreSQL's justify_months function.
            </summary>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> based on this one, but with any months converted to multiples of &#xB1;30days.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.JustifyInterval">
            <summary>
            Equivalent to PostgreSQL's justify_interval function.
            </summary>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> based on this one,
            but with any months converted to multiples of &#xB1;30days
            and then with any days converted to multiples of &#xB1;24hours</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.UnjustifyInterval">
            <summary>
            Opposite to PostgreSQL's justify_interval function.
            </summary>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> based on this one, but with any months converted to multiples of &#xB1;30days and then any days converted to multiples of &#xB1;24hours;</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.Canonicalize">
            <summary>
            Produces a canonical NpgslInterval with 0 months and hours in the range of [-23, 23].
            <remarks>
            <para>
            While the fact that for many purposes, two different <see cref="T:NpgsqlTypes.NpgsqlInterval"/> instances could be considered
            equivalent (e.g. one with 2days, 3hours and one with 1day 27hours) there are different possible canonical forms.
            </para><para>
            E.g. we could move all excess hours into days and all excess days into months and have the most readable form,
            or we could move everything into the ticks and have the form that allows for the easiest arithmetic) the form
            chosen has two important properties that make it the best choice.
            </para><para>First, it is closest two how
            <see cref="T:System.TimeSpan"/> objects are most often represented. Second, it is compatible with results of many
            PostgreSQL functions, particularly with age() and the results of subtracting one date, time or timestamp from
            another.
            </para>
            <para>Note that the results of casting a <see cref="T:System.TimeSpan"/> to <see cref="T:NpgsqlTypes.NpgsqlInterval"/> is
            canonicalised.</para>
            </remarks>
            </summary>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> based on this one, but with months converted to multiples of &#xB1;30days and with any hours outside of the range [-23, 23]
            converted into days.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_Implicit(System.TimeSpan)~NpgsqlTypes.NpgsqlInterval">
            <summary>
            Implicit cast of a <see cref="T:System.TimeSpan"/> to an <see cref="T:NpgsqlTypes.NpgsqlInterval"/>
            </summary>
            <param name="timespan">A <see cref="T:System.TimeSpan"/></param>
            <returns>An eqivalent, canonical, <see cref="T:NpgsqlTypes.NpgsqlInterval"/>.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_Explicit(NpgsqlTypes.NpgsqlInterval)~System.TimeSpan">
            <summary>
            Implicit cast of an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="interval">A <see cref="T:NpgsqlTypes.NpgsqlInterval"/>.</param>
            <returns>An equivalent <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.Equals(NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Returns true if another <see cref="T:NpgsqlTypes.NpgsqlInterval"/> is exactly the same as this instance.
            </summary>
            <param name="other">An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> for comparison.</param>
            <returns>true if the two <see cref="T:NpgsqlTypes.NpgsqlInterval"/> instances are exactly the same,
            false otherwise.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.Equals(System.Object)">
            <summary>
            Returns true if another object is an <see cref="T:NpgsqlTypes.NpgsqlInterval"/>, that is exactly the same as
            this instance
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> for comparison.</param>
            <returns>true if the argument is an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> and is exactly the same
            as this one, false otherwise.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.Compare(NpgsqlTypes.NpgsqlInterval,NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares two <see cref="T:NpgsqlTypes.NpgsqlInterval"/> instances.
            </summary>
            <param name="x">The first <see cref="T:NpgsqlTypes.NpgsqlInterval"/>.</param>
            <param name="y">The second <see cref="T:NpgsqlTypes.NpgsqlInterval"/>.</param>
            <returns>0 if the two are equal or equivalent. A value greater than zero if x is greater than y,
            a value less than zero if x is less than y.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.GetHashCode">
            <summary>
            A hash code suitable for uses with hashing algorithms.
            </summary>
            <returns>An signed integer.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.CompareTo(NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares this instance with another/
            </summary>
            <param name="other">An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare this with.</param>
            <returns>0 if the instances are equal or equivalent. A value less than zero if
            this instance is less than the argument. A value greater than zero if this instance
            is greater than the instance.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.CompareTo(System.Object)">
            <summary>
            Compares this instance with another/
            </summary>
            <param name="other">An object to compare this with.</param>
            <returns>0 if the argument is an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> and the instances are equal or equivalent.
            A value less than zero if the argument is an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> and
            this instance is less than the argument.
            A value greater than zero if the argument is an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> and this instance
            is greater than the instance.</returns>
            A value greater than zero if the argument is null.
            <exception cref="T:System.ArgumentException">The argument is not an <see cref="T:NpgsqlTypes.NpgsqlInterval"/>.</exception>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> and returns a <see cref="T:NpgsqlTypes.NpgsqlInterval"/> instance.
            Designed to use the formats generally returned by PostgreSQL.
            </summary>
            <param name="str">The <see cref="T:System.String"/> to parse.</param>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> represented by the argument.</returns>
            <exception cref="T:System.ArgumentNullException">The string was null.</exception>
            <exception cref="T:System.OverflowException">A value obtained from parsing the string exceeded the values allowed for the relevant component.</exception>
            <exception cref="T:System.FormatException">The string was not in a format that could be parsed to produce an <see cref="T:NpgsqlTypes.NpgsqlInterval"/>.</exception>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.TryParse(System.String,NpgsqlTypes.NpgsqlInterval@)">
            <summary>
            Attempt to parse a <see cref="T:System.String"/> to produce an <see cref="T:NpgsqlTypes.NpgsqlInterval"/>.
            </summary>
            <param name="str">The <see cref="T:System.String"/> to parse.</param>
            <param name="result">(out) The <see cref="T:NpgsqlTypes.NpgsqlInterval"/> produced, or <see cref="F:NpgsqlTypes.NpgsqlInterval.Zero"/> if the parsing failed.</param>
            <returns>true if the parsing succeeded, false otherwise.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.ToString">
            <summary>
            Create a <see cref="T:System.String"/> representation of the <see cref="T:NpgsqlTypes.NpgsqlInterval"/> instance.
            The format returned is of the form:
            [M mon[s]] [d day[s]] [HH:mm:ss[.f[f[f[f[f[f[f[f[f]]]]]]]]]]
            A zero <see cref="T:NpgsqlTypes.NpgsqlInterval"/> is represented as 00:00:00
            <remarks>
            Ticks are 100ns, Postgress resolution is only to 1&#xb5;s at most. Hence we lose 1 or more decimal
            precision in storing values in the database. Despite this, this method will output that extra
            digit of precision. It's forward-compatible with any future increases in resolution up to 100ns,
            and also makes this ToString() more applicable to any other use-case.
            </remarks>
            </summary>
            <returns>The <see cref="T:System.String"/> representation.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_Addition(NpgsqlTypes.NpgsqlInterval,NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Adds two <see cref="T:NpgsqlTypes.NpgsqlInterval"/> together.
            </summary>
            <param name="x">The first <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to add.</param>
            <param name="y">The second <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to add.</param>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> whose values are the sum of the arguments.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_Subtraction(NpgsqlTypes.NpgsqlInterval,NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Subtracts one <see cref="T:NpgsqlTypes.NpgsqlInterval"/> from another.
            </summary>
            <param name="x">The <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to subtract the other from.</param>
            <param name="y">The <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to subtract from the other.</param>
            <returns>An <see cref="T:NpgsqlTypes.NpgsqlInterval"/> whose values are the difference of the arguments</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_Equality(NpgsqlTypes.NpgsqlInterval,NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Returns true if two <see cref="T:NpgsqlTypes.NpgsqlInterval"/> are exactly the same.
            </summary>
            <param name="x">The first <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>true if the two arguments are exactly the same, false otherwise.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_Inequality(NpgsqlTypes.NpgsqlInterval,NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Returns false if two <see cref="T:NpgsqlTypes.NpgsqlInterval"/> are exactly the same.
            </summary>
            <param name="x">The first <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>false if the two arguments are exactly the same, true otherwise.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_LessThan(NpgsqlTypes.NpgsqlInterval,NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares two <see cref="T:NpgsqlTypes.NpgsqlInterval"/> instances to see if the first is less than the second
            </summary>
            <param name="x">The first <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>true if the first <see cref="T:NpgsqlTypes.NpgsqlInterval"/> is less than second, false otherwise.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_LessThanOrEqual(NpgsqlTypes.NpgsqlInterval,NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares two <see cref="T:NpgsqlTypes.NpgsqlInterval"/> instances to see if the first is less than or equivalent to the second
            </summary>
            <param name="x">The first <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>true if the first <see cref="T:NpgsqlTypes.NpgsqlInterval"/> is less than or equivalent to second, false otherwise.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_GreaterThan(NpgsqlTypes.NpgsqlInterval,NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares two <see cref="T:NpgsqlTypes.NpgsqlInterval"/> instances to see if the first is greater than the second
            </summary>
            <param name="x">The first <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>true if the first <see cref="T:NpgsqlTypes.NpgsqlInterval"/> is greater than second, false otherwise.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_GreaterThanOrEqual(NpgsqlTypes.NpgsqlInterval,NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Compares two <see cref="T:NpgsqlTypes.NpgsqlInterval"/> instances to see if the first is greater than or equivalent the second
            </summary>
            <param name="x">The first <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <param name="y">The second <see cref="T:NpgsqlTypes.NpgsqlInterval"/> to compare.</param>
            <returns>true if the first <see cref="T:NpgsqlTypes.NpgsqlInterval"/> is greater than or equivalent to the second, false otherwise.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_UnaryPlus(NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Returns the instance.
            </summary>
            <param name="x">An <see cref="T:NpgsqlTypes.NpgsqlInterval"/>.</param>
            <returns>The argument.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlInterval.op_UnaryNegation(NpgsqlTypes.NpgsqlInterval)">
            <summary>
            Negates an <see cref="T:NpgsqlTypes.NpgsqlInterval"/> instance.
            </summary>
            <param name="x">An <see cref="T:NpgsqlTypes.NpgsqlInterval"/>.</param>
            <returns>The negation of the argument.</returns>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDate.Epoch">
            <summary>
            Represents the date 1970-01-01
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlDate.Era">
            <summary>
            Represents the date 0001-01-01
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTime.Ticks">
            <summary>
            The total number of ticks(100ns units) contained. This is the resolution of the
            <see cref="T:NpgsqlTypes.NpgsqlTime"/>  type.
            <remarks>The resolution of the PostgreSQL
            interval type is by default 1&#xb5;s = 1,000 ns. It may be smaller as follows:
            <list type="number">
            <item>
            <term>time(0)</term>
            <description>resolution of 1s (1 second)</description>
            </item>
            <item>
            <term>time(1)</term>
            <description>resolution of 100ms = 0.1s (100 milliseconds)</description>
            </item>
            <item>
            <term>time(2)</term>
            <description>resolution of 10ms = 0.01s (10 milliseconds)</description>
            </item>
            <item>
            <term>time(3)</term>
            <description>resolution of 1ms = 0.001s (1 millisecond)</description>
            </item>
            <item>
            <term>time(4)</term>
            <description>resolution of 100&#xb5;s = 0.0001s (100 microseconds)</description>
            </item>
            <item>
            <term>time(5)</term>
            <description>resolution of 10&#xb5;s = 0.00001s (10 microseconds)</description>
            </item>
            <item>
            <term>time(6) or interval</term>
            <description>resolution of 1&#xb5;s = 0.000001s (1 microsecond)</description>
            </item>
            </list>
            <para>As such, if the 100-nanosecond resolution is significant to an application, a PostgreSQL time will
            not suffice for those purposes.</para>
            <para>In more frequent cases though, the resolution of time suffices.
            <see cref="T:NpgsqlTypes.NpgsqlTime"/> will always suffice to handle the resolution of any time value, and upon
            writing to the database, will be rounded to the resolution used.</para>
            </remarks>
            <returns>The number of ticks in the instance.</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTime.Microseconds">
            <summary>
            Gets the number of whole microseconds held in the instance.
            <returns>An integer in the range [0, 999999].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTime.Milliseconds">
            <summary>
            Gets the number of whole milliseconds held in the instance.
            <returns>An integer in the range [0, 999].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTime.Seconds">
            <summary>
            Gets the number of whole seconds held in the instance.
            <returns>An interger in the range [0, 59].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTime.Minutes">
            <summary>
            Gets the number of whole minutes held in the instance.
            <returns>An integer in the range [0, 59].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTime.Hours">
            <summary>
            Gets the number of whole hours held in the instance.
            <remarks>Note that the time 24:00:00 can be stored for roundtrip compatibility. Any calculations on such a
            value will normalised it to 00:00:00.</remarks>
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTime.Normalize">
            <summary>
            Normalise this time; if it is 24:00:00, convert it to 00:00:00
            </summary>
            <returns>This time, normalised</returns>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTimeTZ.Microseconds">
            <summary>
            Gets the number of whole microseconds held in the instance.
            <returns>An integer in the range [0, 999999].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTimeTZ.Milliseconds">
            <summary>
            Gets the number of whole milliseconds held in the instance.
            <returns>An integer in the range [0, 999].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTimeTZ.Seconds">
            <summary>
            Gets the number of whole seconds held in the instance.
            <returns>An interger in the range [0, 59].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTimeTZ.Minutes">
            <summary>
            Gets the number of whole minutes held in the instance.
            <returns>An integer in the range [0, 59].</returns>
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlTimeTZ.Hours">
            <summary>
            Gets the number of whole hours held in the instance.
            <remarks>Note that the time 24:00:00 can be stored for roundtrip compatibility. Any calculations on such a
            value will normalised it to 00:00:00.</remarks>
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTimeTZ.Normalize">
            <summary>
            Normalise this time; if it is 24:00:00, convert it to 00:00:00
            </summary>
            <returns>This time, normalised</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTimeTZ.CompareTo(NpgsqlTypes.NpgsqlTimeTZ)">
            <summary>
            Compares this with another <see cref="T:NpgsqlTypes.NpgsqlTimeTZ"/>. As per postgres' rules,
            first the times are compared as if they were both in the same timezone. If they are equal then
            then timezones are compared (+01:00 being "smaller" than -01:00).
            </summary>
            <param name="other">the <see cref="T:NpgsqlTypes.NpgsqlTimeTZ"/> to compare with.</param>
            <returns>An integer which is 0 if they are equal, &lt; 0 if this is the smaller and &gt; 0 if this is the larger.</returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTimeStamp.FromInt64(System.Int64)">
            <summary>
            Creates a NpgsqlTimeStamp from backend binary format
            </summary>
            <param name="value">Number of microseconds since 2000-01-01 00:00:00</param>
        </member>
        <member name="T:NpgsqlTypes.FastpathArg">
            <summary>
            Fast Path Arg.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.FastpathArg.type">
            <summary>
            Type of argument, true=integer, false=byte[].
            </summary>
        </member>
        <member name="F:NpgsqlTypes.FastpathArg.value">
            <summary>
            Integer value if type=true.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.FastpathArg.bytes">
            <summary>
            Byte value if type=false;
            </summary>
        </member>
        <member name="M:NpgsqlTypes.FastpathArg.#ctor(System.Int32)">
            <summary>
            Constructs an argument that consists of an integer value.
            </summary>
            <param name="value">Int value to set.</param>
        </member>
        <member name="M:NpgsqlTypes.FastpathArg.#ctor(System.Byte[])">
            <summary>
            Constructs an argument that consists of an array of bytes.
            </summary>
            <param name="bytes">Array to store.</param>
        </member>
        <member name="M:NpgsqlTypes.FastpathArg.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructs an argument that consists of part of a byte array.
            </summary>
            <param name="buf">Source array.</param>
            <param name="off">offset within array.</param>
            <param name="len">length of data to include.</param>
        </member>
        <member name="M:NpgsqlTypes.FastpathArg.#ctor(System.String)">
            <summary>
            Constructs an argument that consists of a String.
            </summary>
            <param name="s">String to store.</param>
        </member>
        <member name="M:NpgsqlTypes.FastpathArg.Send(System.IO.Stream)">
            <summary>
            This sends this argument down the network stream.
            The stream sent consists of the length.int4 then the contents.
            Note: This is called from Fastpath, and cannot be called from
            client code.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:NpgsqlTypes.FastpathArg.SendSize">
            <summary>
            Report send size.
            </summary>
            <returns>Send size.</returns>
        </member>
        <member name="T:NpgsqlTypes.NativeToBackendTypeConverterOptions">
            <summary>
            Options that control certain aspects of native to backend conversions that depend
            on backend version and status.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NativeToBackendTypeConverterOptions.System#ICloneable#Clone">
            <summary>
            Clone the current object.
            </summary>
            <returns>A new NativeToBackendTypeConverterOptions object.</returns>
        </member>
        <member name="M:NpgsqlTypes.NativeToBackendTypeConverterOptions.Clone(NpgsqlTypes.NpgsqlBackendTypeMapping)">
            <summary>
            Clone the current object with a different OID/Name mapping.
            </summary>
            <param name="oidToNameMapping">OID/Name mapping object to use in the new instance.</param>
            <returns>A new NativeToBackendTypeConverterOptions object.</returns>
        </member>
        <member name="T:NpgsqlTypes.BasicBackendToNativeTypeConverter">
            <summary>
            Provide event handlers to convert all native supported basic data types from their backend
            text representation to a .NET object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.SingleCharTextToChar(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Convert a "char" to .NET char.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.SingleCharBinaryToChar(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a "char" to .NET char.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.TextBinaryToString(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert UTF8 encoded text a string.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ByteaTextToByteArray(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Byte array from bytea encoded as ASCII text, escaped or hex format.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ByteaBinaryToByteArray(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Byte array from bytea encoded as binary.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.BooleanTextToBoolean(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Convert a postgresql boolean to a System.Boolean.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.BooleanBinaryToBoolean(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a postgresql boolean to a System.Boolean.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ToDateTime(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Convert a postgresql datetime to a System.DateTime.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ToDate(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Convert a postgresql date to a System.DateTime.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ToTime(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Convert a postgresql time to a System.DateTime.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.ToMoney(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Convert a postgresql money to a System.Decimal.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicBackendToNativeTypeConverter.Float4Float8BinaryToFloatDouble(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a postgresql float4 or float8 to a System.Float or System.Double respectively.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.ExtendedBackendToNativeTypeConverter">
            <summary>
            Provide event handlers to convert extended native supported data types from their backend
            text representation to a .NET object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToPoint(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Convert a postgresql point to a System.NpgsqlPoint.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToBox(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Convert a postgresql point to a System.RectangleF.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToLSeg(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            LDeg.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToPath(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Path.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToPolygon(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToCircle(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToInet(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            Inet.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedBackendToNativeTypeConverter.ToInterval(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
            interval
            </summary>
        </member>
        <member name="T:NpgsqlTypes.BasicNativeToBackendTypeConverter">
            <summary>
            Provide event handlers to convert the basic native supported data types from
            native form to backend representation.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToSingleCharText(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Convert a Char to something that can be interpreted as a single-byte "char".
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToSingleCharBinary(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,NpgsqlTypes.NativeToBackendTypeConverterOptions)">
            <summary>
            Convert a Char to a single-byte "char".
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.StringToTextText(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Convert a string to UTF8 encoded text, escaped and quoted as required.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.StringToTextBinary(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,NpgsqlTypes.NativeToBackendTypeConverterOptions)">
            <summary>
            Convert a string to UTF8 encoded text.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ByteArrayToByteaText(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Binary data, escaped and quoted as required.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ByteArrayToByteaTextEscaped(System.Byte[],NpgsqlTypes.BasicNativeToBackendTypeConverter.StringEncodingInfo)">
            <summary>
            Binary data with possible older style octal escapes, quoted.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ByteArrayToByteaTextHexFormat(System.Byte[],NpgsqlTypes.BasicNativeToBackendTypeConverter.StringEncodingInfo)">
            <summary>
            Binary data in the new hex format (>= 9.0), quoted.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ByteArrayToByteaBinary(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,NpgsqlTypes.NativeToBackendTypeConverterOptions)">
            <summary>
            Binary data, raw.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.BooleanToBooleanText(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Convert to a postgresql boolean text format.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.BooleanToBooleanBinary(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,NpgsqlTypes.NativeToBackendTypeConverterOptions)">
            <summary>
            Convert to a postgresql boolean binary format.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.Int16ToInt2Binary(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,NpgsqlTypes.NativeToBackendTypeConverterOptions)">
            <summary>
            Convert to a postgresql binary int2.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.Int32ToInt4Binary(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,NpgsqlTypes.NativeToBackendTypeConverterOptions)">
            <summary>
            Convert to a postgresql binary int4.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.Int64ToInt8Binary(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,NpgsqlTypes.NativeToBackendTypeConverterOptions)">
            <summary>
            Convert to a postgresql binary int8.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToDateTime(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Convert to a postgresql timestamp.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToDate(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Convert to a postgresql date.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToTime(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Convert to a postgresql time.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.ToMoney(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Convert to a postgres money.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.SingleToFloat4Text(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Convert to a postgres double with maximum precision.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.SingleToFloat4Binary(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,NpgsqlTypes.NativeToBackendTypeConverterOptions)">
            <summary>
            Convert a System.Float to a postgres float4.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.BasicNativeToBackendTypeConverter.DoubleToFloat8Binary(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,NpgsqlTypes.NativeToBackendTypeConverterOptions)">
            <summary>
            Convert a System.Double to a postgres float8.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.ExtendedNativeToBackendTypeConverter">
            <summary>
            Provide event handlers to convert extended native supported data types from
            native form to backend representation.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToPoint(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Point.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToBox(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Box.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToLSeg(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            LSeg.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToPath(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Open path.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToPolygon(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToCircle(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToIPAddress(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Convert to a postgres inet.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.ExtendedNativeToBackendTypeConverter.ToInterval(NpgsqlTypes.NpgsqlNativeTypeInfo,System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Convert to a postgres interval
            </summary>
        </member>
        <member name="T:NpgsqlTypes.ConvertBackendTextToNativeHandler">
            <summary>
            Delegate called to convert the given backend text data to its native representation.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.ConvertBackendBinaryToNativeHandler">
            <summary>
            Delegate called to convert the given backend binary data to its native representation.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlBackendTypeInfo">
            <summary>
            Represents a backend data type.
            This class can be called upon to convert a backend field representation to a native object.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeInfo.#ctor(System.UInt32,System.String,NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Type,NpgsqlTypes.ConvertBackendTextToNativeHandler,NpgsqlTypes.ConvertBackendBinaryToNativeHandler)">
            <summary>
            Construct a new NpgsqlTypeInfo with the given attributes and conversion handlers.
            </summary>
            <param name="OID">Type OID provided by the backend server.</param>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="DbType">DbType</param>
            <param name="Type">System type to convert fields of this type to.</param>
            <param name="ConvertBackendTextToNative">Data conversion handler for text encoding.</param>
            <param name="ConvertBackendBinaryToNative">Data conversion handler for binary data.</param>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.OID">
            <summary>
            Type OID provided by the backend server.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.Name">
            <summary>
            Type name provided by the backend server.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.NpgsqlDbType">
            <summary>
            NpgsqlDbType.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.DbType">
            <summary>
            NpgsqlDbType.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.Type">
            <summary>
            Provider type to convert fields of this type to.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.FrameworkType">
            <summary>
            System type to convert fields of this type to.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeInfo.SupportsBinaryBackendData">
            <summary>
            Reports whether a backend binary to native decoder is available for this type.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeInfo.ConvertBackendBinaryToNative(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Perform a data conversion from a backend representation to
            a native object.
            </summary>
            <param name="BackendData">Data sent from the backend.</param>
            <param name="fieldValueSize">fieldValueSize</param>
            <param name="TypeModifier">Type modifier field sent from the backend.</param>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeInfo.ConvertBackendTextToNative(System.Byte[],System.Int16,System.Int32)">
            <summary>
            Perform a data conversion from a backend representation to
            a native object.
            </summary>
            <param name="BackendData">Data sent from the backend.</param>
            <param name="TypeSize">TypeSize</param>
            <param name="TypeModifier">Type modifier field sent from the backend.</param>
        </member>
        <member name="T:NpgsqlTypes.ConvertNativeToBackendTextHandler">
            <summary>
            Delegate called to convert the given native data to its backand representation.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlNativeTypeInfo">
            <summary>
            Represents a backend data type.
            This class can be called upon to convert a native object to its backend field representation,
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeInfo.ArrayOf(NpgsqlTypes.NpgsqlNativeTypeInfo)">
            <summary>
            Returns an NpgsqlNativeTypeInfo for an array where the elements are of the type
            described by the NpgsqlNativeTypeInfo supplied.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeInfo.#ctor(System.String,NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Boolean,NpgsqlTypes.ConvertNativeToBackendTextHandler,NpgsqlTypes.ConvertNativeToBackendBinaryHandler)">
            <summary>
            Construct a new NpgsqlTypeInfo with the given attributes and conversion handlers.
            </summary>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="DbType">DbType</param>
            <param name="Quote">Quote</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="ConvertNativeToBackendText">Data conversion handler for text backend encoding.</param>
            <param name="ConvertNativeToBackendBinary">Data conversion handler for binary backend encoding (for extended queries).</param>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeInfo.Name">
            <summary>
            Type name provided by the backend server.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeInfo.NpgsqlDbType">
            <summary>
            NpgsqlDbType.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeInfo.DbType">
            <summary>
            DbType.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeInfo.Quote">
            <summary>
            Apply quoting.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeInfo.ConvertToBackend(System.Object,System.Boolean,NpgsqlTypes.NativeToBackendTypeConverterOptions,System.Boolean)">
            <summary>
            Perform a data conversion from a native object to
            a backend representation.
            DBNull and null values are handled differently depending if a plain query is used
            When
            </summary>
            <param name="NativeData">Native .NET object to be converted.</param>
            <param name="forExtendedQuery">Specifies that the value should be formatted for the extended query syntax.</param>
            <param name="options">Options to guide serialization.  If null, a default options set is used.</param>
            <param name="arrayElement">Specifies that the value should be formatted as an extended query array element.</param>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeInfo.SupportsBinaryBackendData">
            <summary>
            Reports whether a native to backend binary encoder is available for this type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlBackendTypeMapping">
            <summary>
            Provide mapping between type OID, type name, and a NpgsqlBackendTypeInfo object that represents it.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.#ctor">
            <summary>
            Construct an empty mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.#ctor(NpgsqlTypes.NpgsqlBackendTypeMapping)">
            <summary>
            Copy constuctor.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.AddType(NpgsqlTypes.NpgsqlBackendTypeInfo)">
            <summary>
            Add the given NpgsqlBackendTypeInfo to this mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.AddType(System.UInt32,System.String,NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Type,NpgsqlTypes.ConvertBackendTextToNativeHandler,NpgsqlTypes.ConvertBackendBinaryToNativeHandler)">
            <summary>
            Add a new NpgsqlBackendTypeInfo with the given attributes and conversion handlers to this mapping.
            </summary>
            <param name="OID">Type OID provided by the backend server.</param>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="DbType">DbType</param>
            <param name="Type">System type to convert fields of this type to.</param>
            <param name="BackendTextConvert">Data conversion handler for text encoding.</param>
            <param name="BackendBinaryConvert">Data conversion handler for binary data.</param>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeMapping.Count">
            <summary>
            Get the number of type infos held.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeMapping.Item(System.UInt32)">
            <summary>
            Retrieve the NpgsqlBackendTypeInfo with the given backend type OID, or null if none found.
            </summary>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlBackendTypeMapping.Item(System.String)">
            <summary>
            Retrieve the NpgsqlBackendTypeInfo with the given backend type name, or null if none found.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.Clone">
            <summary>
            Make a shallow copy of this type mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.ContainsOID(System.UInt32)">
            <summary>
            Determine if a NpgsqlBackendTypeInfo with the given backend type OID exists in this mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlBackendTypeMapping.ContainsName(System.String)">
            <summary>
            Determine if a NpgsqlBackendTypeInfo with the given backend type name exists in this mapping.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlNativeTypeMapping">
            <summary>
            Provide mapping between type Type, NpgsqlDbType and a NpgsqlNativeTypeInfo object that represents it.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.AddType(NpgsqlTypes.NpgsqlNativeTypeInfo)">
            <summary>
            Add the given NpgsqlNativeTypeInfo to this mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.AddType(System.String,NpgsqlTypes.NpgsqlDbType,System.Data.DbType,System.Boolean,NpgsqlTypes.ConvertNativeToBackendTextHandler,NpgsqlTypes.ConvertNativeToBackendBinaryHandler)">
            <summary>
            Add a new NpgsqlNativeTypeInfo with the given attributes and conversion handlers to this mapping.
            </summary>
            <param name="Name">Type name provided by the backend server.</param>
            <param name="NpgsqlDbType">NpgsqlDbType</param>
            <param name="DbType">DbType</param>
            <param name="Quote">Quote</param>
            <param name="NativeTextConvert">Data conversion handler for text backend encoding.</param>
            <param name="NativeBinaryConvert">Data conversion handler for binary backend encoding (for extended query).</param>
        </member>
        <member name="P:NpgsqlTypes.NpgsqlNativeTypeMapping.Count">
            <summary>
            Get the number of type infos held.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.TryGetValue(NpgsqlTypes.NpgsqlDbType,NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Retrieve the NpgsqlNativeTypeInfo with the given NpgsqlDbType.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.TryGetValue(System.Data.DbType,NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Retrieve the NpgsqlNativeTypeInfo with the given DbType.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.TryGetValue(System.Type,NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Retrieve the NpgsqlNativeTypeInfo with the given Type.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.ContainsName(System.String)">
            <summary>
            Determine if a NpgsqlNativeTypeInfo with the given backend type name exists in this mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.ContainsNpgsqlDbType(NpgsqlTypes.NpgsqlDbType)">
            <summary>
            Determine if a NpgsqlNativeTypeInfo with the given NpgsqlDbType exists in this mapping.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlNativeTypeMapping.ContainsType(System.Type)">
            <summary>
            Determine if a NpgsqlNativeTypeInfo with the given Type name exists in this mapping.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlPoint">
            <summary>
            Represents a PostgreSQL point type.
            </summary>
            <remarks>
            See http://www.postgresql.org/docs/9.4/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlLine">
            <summary>
            Represents a PostgreSQL line type.
            </summary>
            <remarks>
            See http://www.postgresql.org/docs/9.4/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlLSeg">
            <summary>
            Represents a PostgreSQL Line Segment type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlBox">
            <summary>
            Represents a PostgreSQL box type.
            </summary>
            <remarks>
            See http://www.postgresql.org/docs/9.4/static/datatype-geometric.html
            </remarks>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlPath">
            <summary>
            Represents a PostgreSQL Path type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlPolygon">
            <summary>
            Represents a PostgreSQL Polygon type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlCircle">
            <summary>
            Represents a PostgreSQL Circle type.
            </summary>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlInet">
            <summary>
            Represents a PostgreSQL inet type, which is a combination of an IPAddress and a
            subnet mask.
            </summary>
            <remarks>
            http://www.postgresql.org/docs/9.4/static/datatype-net-types.html
            </remarks>
        </member>
        <member name="T:NpgsqlTypes.NpgsqlTypesHelper">
            <summary>
               This class contains helper methods for type conversion between
            the .Net type system and postgresql.
            </summary>
        </member>
        <member name="F:NpgsqlTypes.NpgsqlTypesHelper.BackendTypeMappingCache">
            <summary>
            A cache of basic datatype mappings keyed by server version.  This way we don't
            have to load the basic type mappings for every connection.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.TryGetBackendTypeInfo(System.String,NpgsqlTypes.NpgsqlBackendTypeInfo@)">
            <summary>
            Find a NpgsqlNativeTypeInfo in the default types map that can handle objects
            of the given NpgsqlDbType.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.TryGetNativeTypeInfo(NpgsqlTypes.NpgsqlDbType,NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Find a NpgsqlNativeTypeInfo in the default types map that can handle objects
            of the given NpgsqlDbType.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.TryGetNativeTypeInfo(System.Data.DbType,NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Find a NpgsqlNativeTypeInfo in the default types map that can handle objects
            of the given DbType.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.TryGetNativeTypeInfo(System.Type,NpgsqlTypes.NpgsqlNativeTypeInfo@)">
            <summary>
            Find a NpgsqlNativeTypeInfo in the default types map that can handle objects
            of the given System.Type.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.ConvertBackendBytesToSystemType(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int32,System.Int32)">
            <summary>
             This method is responsible to convert the byte[] received from the backend
             to the corresponding NpgsqlType.
             The given TypeInfo is called upon to do the conversion.
             If no TypeInfo object is provided, no conversion is performed.
             </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.ConvertBackendStringToSystemType(NpgsqlTypes.NpgsqlBackendTypeInfo,System.Byte[],System.Int16,System.Int32)">
            <summary>
             This method is responsible to convert the string received from the backend
             to the corresponding NpgsqlType.
             The given TypeInfo is called upon to do the conversion.
             If no TypeInfo object is provided, no conversion is performed.
             </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.PrepareDefaultTypesMap">
            <summary>
            Create the one and only native to backend type map.
            This map is used when formatting native data
            types to backend representations.
            </summary>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.CreateAndLoadInitialTypesMapping(Npgsql.NpgsqlConnector)">
            <summary>
             This method creates (or retrieves from cache) a mapping between type and OID
             of all natively supported postgresql data types.
             This is needed as from one version to another, this mapping can be changed and
             so we avoid hardcoding them.
             </summary>
             <returns>NpgsqlTypeMapping containing all known data types.  The mapping must be
             cloned before it is modified because it is cached; changes made by one connection may
             effect another connection.
             </returns>
        </member>
        <member name="M:NpgsqlTypes.NpgsqlTypesHelper.LoadTypesMappings(Npgsql.NpgsqlConnector,System.Collections.Generic.IEnumerable{NpgsqlTypes.NpgsqlBackendTypeInfo})">
            <summary>
            Attempt to map types by issuing a query against pg_type.
            This function takes a list of NpgsqlTypeInfo and attempts to resolve the OID field
            of each by querying pg_type.  If the mapping is found, the type info object is
            updated (OID) and added to the provided NpgsqlTypeMapping object.
            </summary>
            <param name="conn">NpgsqlConnector to send query through.</param>
            <param name="typeInfoList">List of types that need to have OID's mapped.</param>
        </member>
    </members>
</doc>
